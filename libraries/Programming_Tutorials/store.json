[{"id":0,"query_date":"07/01/2022","url":"https://www.tutorialspoint.com/javascript/javascript_variables.htm","body":"\nHome\nCoding Ground\nJobs\nWhiteboard\nTools\nBusiness\nTeach with us\nLogin\nCategory\nAcademic Tutorials\nBig Data & Analytics\nComputer Programming\nComputer Science\nDatabases\nDevOps\nDigital Marketing\nEngineering Tutorials\nExams Syllabus\nFamous Monuments\nGATE Exams\nLatest Technologies\nMachine Learning\nMainframe Development\nManagement Tutorials\nMathematics Tutorials\nMicrosoft Technologies\nMisc tutorials\nMobile Development\nJava Technologies\nPython Technologies\nSAP Tutorials\nProgramming Scripts\nSelected Reading\nSoftware Quality\nSoft Skills\nTelecom Tutorials\nUPSC IAS Exams\nWeb Development\nSports Tutorials\nXML Technologies\nMulti-Language\nInterview Questions\nPrime Packs\nCourses\neBooks\nLibrary\nQ/A\nLogin\nJavascript Basics Tutorial\nJavascript - Home\nJavascript - Overview\nJavascript - Syntax\nJavascript - Enabling\nJavascript - Placement\nJavascript - Variables\nJavascript - Operators\nJavascript - If...Else\nJavascript - Switch Case\nJavascript - While Loop\nJavascript - For Loop\nJavascript - For...in\nJavascript - Loop Control\nJavascript - Functions\nJavascript - Events\nJavascript - Cookies\nJavascript - Page Redirect\nJavascript - Dialog Boxes\nJavascript - Void Keyword\nJavascript - Page Printing\nJavaScript Objects\nJavascript - Objects\nJavascript - Number\nJavascript - Boolean\nJavascript - Strings\nJavascript - Arrays\nJavascript - Date\nJavascript - Math\nJavascript - RegExp\nJavascript - HTML DOM\nJavaScript Advanced\nJavascript - Error Handling\nJavascript - Validations\nJavascript - Animation\nJavascript - Multimedia\nJavascript - Debugging\nJavascript - Image Map\nJavascript - Browsers\nJavaScript Useful Resources\nJavascript - Questions And Answers\nJavascript - Quick Guide\nJavascript - Functions\nJavascript - Resources\nSelected Reading\nUPSC IAS Exams Notes\nDeveloper's Best Practices\nQuestions and Answers\nEffective Resume Writing\nHR Interview Questions\nComputer Glossary\nWho is Who\nJavaScript - Variables\nAdvertisements\nPrevious Page\nNext Page\nJavaScript Datatypes\nOne of the most fundamental characteristics of a programming language is the set of data types it supports. These are the type of values that can be represented and manipulated in a programming language.\nJavaScript allows you to work with three primitive data types −\nNumbers, eg. 123, 120.50 etc.\nStrings of text\ne.g. \"This text string\" etc.\nBoolean e.g. true or false.\nJavaScript also defines two trivial data types, null and undefined, each of which defines only a single value. In addition to these primitive data types, JavaScript supports a composite data type known as object. We will cover objects in detail in a separate chapter.\nNote − JavaScript does not make a distinction between integer values and floating-point values. All numbers in JavaScript are represented as floating-point values. JavaScript represents numbers using the 64-bit floating-point format defined by the IEEE 754 standard.\nJavaScript Variables\nLike many other programming languages, JavaScript has variables. Variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container.\nBefore you use a variable in a JavaScript program, you must declare it. Variables are declared with the var keyword as follows.\n<script type = \"text/javascript\">\n<!--\nvar money;\nvar name;\n//-->\n</script>\nYou can also declare multiple variables with the same var keyword as follows −\n<script type = \"text/javascript\">\n<!--\nvar money, name;\n//-->\n</script>\nStoring a value in a variable is called variable initialization. You can do variable initialization at the time of variable creation or at a later point in time when you need that variable.\nFor instance, you might create a variable named money and assign the value 2000.50 to it later. For another variable, you can assign a value at the time of initialization as follows.\n<script type = \"text/javascript\">\n<!--\nvar name = \"Ali\";\nvar money;\nmoney = 2000.50;\n//-->\n</script>\nNote − Use the var keyword only for declaration or initialization, once for the life of any variable name in a document. You should not re-declare same variable twice.\nJavaScript is untyped language. This means that a JavaScript variable can hold a value of any data type. Unlike many other languages, you don't have to tell JavaScript during variable declaration what type of value the variable will hold. The value type of a variable can change during the execution of a program and JavaScript takes care of it automatically.\nJavaScript Variable Scope\nThe scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.\nGlobal Variables − A global variable has global scope which means it can be defined anywhere in your JavaScript code.\nLocal Variables − A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.\nWithin the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. Take a look into the following example.\nLive Demo\n<html>\n<body onload = checkscope();>\n<script type = \"text/javascript\">\n<!--\nvar myVar = \"global\";\n// Declare a global variable\nfunction checkscope( ) {\nvar myVar = \"local\";\n// Declare a local variable\ndocument.write(myVar);\n}\n//-->\n</script>\n</body>\n</html>\nThis produces the following result −\nlocal\nJavaScript Variable Names\nWhile naming your variables in JavaScript, keep the following rules in mind.\nYou should not use any of the JavaScript reserved keywords as a variable name. These keywords are mentioned in the next section. For example, break or boolean variable names are not valid.\nJavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, 123test is an invalid variable name but _123test is a valid one.\nJavaScript variable names are case-sensitive. For example, Name and name are two different variables.\nJavaScript Reserved Words\nA list of all the reserved words in JavaScript are given in the following table. They cannot be used as JavaScript variables, functions, methods, loop labels, or any object names.\nabstract\nelse\ninstanceof\nswitch\nboolean\nenum\nint\nsynchronized\nbreak\nexport\ninterface\nthis\nbyte\nextends\nlong\nthrow\ncase\nfalse\nnative\nthrows\ncatch\nfinal\nnew\ntransient\nchar\nfinally\nnull\ntrue\nclass\nfloat\npackage\ntry\nconst\nfor\nprivate\ntypeof\ncontinue\nfunction\nprotected\nvar\ndebugger\ngoto\npublic\nvoid\ndefault\nif\nreturn\nvolatile\ndelete\nimplements\nshort\nwhile\ndo\nimport\nstatic\nwith\ndouble\nin\nsuper\nPrevious Page\nPrint Page\nNext Page\nAdvertisements\nAbout us\nRefund Policy\nTerms of use\nPrivacy Policy\nFAQ's\nContact\n© Copyright 2022. All Rights Reserved.\nWe make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy.\nAgree\nLearn more\n","title":"JavaScript - Variables","images":["/static/images/logo-color.png","/static/images/logo-color-b.png","/javascript/images/javascript-mini-logo.jpg","/javascript/images/javascript-video-tutorials.jpg","/static/images/logo-color-footer.png","/static/images/logo-footer-b.png"]},{"id":1,"query_date":"07/01/2022","url":"https://www.tutorialspoint.com/javascript/javascript_placement.htm\t","body":"\nHome\nCoding Ground\nJobs\nWhiteboard\nTools\nBusiness\nTeach with us\nLogin\nCategory\nAcademic Tutorials\nBig Data & Analytics\nComputer Programming\nComputer Science\nDatabases\nDevOps\nDigital Marketing\nEngineering Tutorials\nExams Syllabus\nFamous Monuments\nGATE Exams\nLatest Technologies\nMachine Learning\nMainframe Development\nManagement Tutorials\nMathematics Tutorials\nMicrosoft Technologies\nMisc tutorials\nMobile Development\nJava Technologies\nPython Technologies\nSAP Tutorials\nProgramming Scripts\nSelected Reading\nSoftware Quality\nSoft Skills\nTelecom Tutorials\nUPSC IAS Exams\nWeb Development\nSports Tutorials\nXML Technologies\nMulti-Language\nInterview Questions\nPrime Packs\nCourses\neBooks\nLibrary\nQ/A\nLogin\nJavascript Basics Tutorial\nJavascript - Home\nJavascript - Overview\nJavascript - Syntax\nJavascript - Enabling\nJavascript - Placement\nJavascript - Variables\nJavascript - Operators\nJavascript - If...Else\nJavascript - Switch Case\nJavascript - While Loop\nJavascript - For Loop\nJavascript - For...in\nJavascript - Loop Control\nJavascript - Functions\nJavascript - Events\nJavascript - Cookies\nJavascript - Page Redirect\nJavascript - Dialog Boxes\nJavascript - Void Keyword\nJavascript - Page Printing\nJavaScript Objects\nJavascript - Objects\nJavascript - Number\nJavascript - Boolean\nJavascript - Strings\nJavascript - Arrays\nJavascript - Date\nJavascript - Math\nJavascript - RegExp\nJavascript - HTML DOM\nJavaScript Advanced\nJavascript - Error Handling\nJavascript - Validations\nJavascript - Animation\nJavascript - Multimedia\nJavascript - Debugging\nJavascript - Image Map\nJavascript - Browsers\nJavaScript Useful Resources\nJavascript - Questions And Answers\nJavascript - Quick Guide\nJavascript - Functions\nJavascript - Resources\nSelected Reading\nUPSC IAS Exams Notes\nDeveloper's Best Practices\nQuestions and Answers\nEffective Resume Writing\nHR Interview Questions\nComputer Glossary\nWho is Who\nJavaScript - Placement in HTML File\nAdvertisements\nPrevious Page\nNext Page\nThere is a flexibility given to include JavaScript code anywhere in an HTML document. However the most preferred ways to include JavaScript in an HTML file are as follows −\nScript in <head>...</head> section.\nScript in <body>...</body> section.\nScript in <body>...</body> and <head>...</head> sections.\nScript in an external file and then include in <head>...</head> section.\nIn the following section, we will see how we can place JavaScript in an HTML file in different ways.\nJavaScript in <head>...</head> section\nIf you want to have a script run on some event, such as when a user clicks somewhere, then you will place that script in the head as follows −\nLive Demo\n<html>\n<head>\n<script type = \"text/javascript\">\n<!--\nfunction sayHello() {\nalert(\"Hello World\")\n}\n//-->\n</script>\n</head>\n<body>\n<input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n</body>\n</html>\nThis code will produce the following results −\nJavaScript in <body>...</body> section\nIf you need a script to run as the page loads so that the script generates content in the page, then the script goes in the <body> portion of the document. In this case, you would not have any function defined using JavaScript. Take a look at the following code.\nLive Demo\n<html>\n<head>\n</head>\n<body>\n<script type = \"text/javascript\">\n<!--\ndocument.write(\"Hello World\")\n//-->\n</script>\n<p>This is web page body </p>\n</body>\n</html>\nThis code will produce the following results −\nJavaScript in <body> and <head> Sections\nYou can put your JavaScript code in <head> and <body> section altogether as follows −\nLive Demo\n<html>\n<head>\n<script type = \"text/javascript\">\n<!--\nfunction sayHello() {\nalert(\"Hello World\")\n}\n//-->\n</script>\n</head>\n<body>\n<script type = \"text/javascript\">\n<!--\ndocument.write(\"Hello World\")\n//-->\n</script>\n<input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n</body>\n</html>\nThis code will produce the following result −\nJavaScript in External File\nAs you begin to work more extensively with JavaScript, you will be likely to find that there are cases where you are reusing identical JavaScript code on multiple pages of a site.\nYou are not restricted to be maintaining identical code in multiple HTML files. The script tag provides a mechanism to allow you to store JavaScript in an external file and then include it into your HTML files.\nHere is an example to show how you can include an external JavaScript file in your HTML code using script tag and its src attribute.\n<html>\n<head>\n<script type = \"text/javascript\" src = \"filename.js\" ></script>\n</head>\n<body>\n.......\n</body>\n</html>\nTo use JavaScript from an external file source, you need to write all your JavaScript source code in a simple text file with the extension \".js\" and then include that file as shown above.\nFor example, you can keep the following content in filename.js file and then you can use sayHello function in your HTML file after including the filename.js file.\nfunction sayHello() {\nalert(\"Hello World\")\n}\nPrevious Page\nPrint Page\nNext Page\nAdvertisements\nAbout us\nRefund Policy\nTerms of use\nPrivacy Policy\nFAQ's\nContact\n© Copyright 2022. All Rights Reserved.\nWe make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy.\nAgree\nLearn more\n","title":"JavaScript - Placement in HTML File","images":["/static/images/logo-color.png","/static/images/logo-color-b.png","/javascript/images/javascript-mini-logo.jpg","/javascript/images/javascript-video-tutorials.jpg","/static/images/logo-color-footer.png","/static/images/logo-footer-b.png"]},{"id":2,"query_date":"07/01/2022","url":"https://www.tutorialspoint.com/javascript/index.htm","body":"\nHome\nCoding Ground\nJobs\nWhiteboard\nTools\nBusiness\nTeach with us\nLogin\nCategory\nAcademic Tutorials\nBig Data & Analytics\nComputer Programming\nComputer Science\nDatabases\nDevOps\nDigital Marketing\nEngineering Tutorials\nExams Syllabus\nFamous Monuments\nGATE Exams\nLatest Technologies\nMachine Learning\nMainframe Development\nManagement Tutorials\nMathematics Tutorials\nMicrosoft Technologies\nMisc tutorials\nMobile Development\nJava Technologies\nPython Technologies\nSAP Tutorials\nProgramming Scripts\nSelected Reading\nSoftware Quality\nSoft Skills\nTelecom Tutorials\nUPSC IAS Exams\nWeb Development\nSports Tutorials\nXML Technologies\nMulti-Language\nInterview Questions\nPrime Packs\nCourses\neBooks\nLibrary\nQ/A\nLogin\nJavascript Basics Tutorial\nJavascript - Home\nJavascript - Overview\nJavascript - Syntax\nJavascript - Enabling\nJavascript - Placement\nJavascript - Variables\nJavascript - Operators\nJavascript - If...Else\nJavascript - Switch Case\nJavascript - While Loop\nJavascript - For Loop\nJavascript - For...in\nJavascript - Loop Control\nJavascript - Functions\nJavascript - Events\nJavascript - Cookies\nJavascript - Page Redirect\nJavascript - Dialog Boxes\nJavascript - Void Keyword\nJavascript - Page Printing\nJavaScript Objects\nJavascript - Objects\nJavascript - Number\nJavascript - Boolean\nJavascript - Strings\nJavascript - Arrays\nJavascript - Date\nJavascript - Math\nJavascript - RegExp\nJavascript - HTML DOM\nJavaScript Advanced\nJavascript - Error Handling\nJavascript - Validations\nJavascript - Animation\nJavascript - Multimedia\nJavascript - Debugging\nJavascript - Image Map\nJavascript - Browsers\nJavaScript Useful Resources\nJavascript - Questions And Answers\nJavascript - Quick Guide\nJavascript - Functions\nJavascript - Resources\nSelected Reading\nUPSC IAS Exams Notes\nDeveloper's Best Practices\nQuestions and Answers\nEffective Resume Writing\nHR Interview Questions\nComputer Glossary\nWho is Who\nJavascript Tutorial\nPDF Version\nQuick Guide\nResources\nJob Search\nDiscussion\nJavaScript is a lightweight, interpreted programming language. It is designed for creating network-centric applications. It is complimentary to and integrated with Java. JavaScript is very easy to implement because it is integrated with HTML. It is open and cross-platform.\nWhy to Learn Javascript\nJavascript is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning Javascript:\nJavascript is the most popular programming language in the world and that makes it a programmer’s great choice. Once you learnt Javascript, it helps you developing great front-end as well as back-end softwares using different Javascript based frameworks like jQuery, Node.JS etc.\nJavascript is everywhere, it comes installed on every modern web browser and so to learn Javascript you really do not need any special environment setup. For example Chrome, Mozilla Firefox , Safari and every browser you know as of today, supports Javascript.\nJavascript helps you create really beautiful and crazy fast websites. You can develop your website with a console like look and feel and give your users the best Graphical User Experience.\nJavaScript usage has now extended to mobile app development, desktop app development, and game development. This opens many opportunities for you as Javascript Programmer.\nDue to high demand, there is tons of job growth and high pay for those who know JavaScript. You can navigate over to different job sites to see what having JavaScript skills looks like in the job market.\nGreat thing about Javascript is that you will find tons of frameworks and Libraries already developed which can be used directly in your software development to reduce your time to market.\nThere could be 1000s of good reasons to learn Javascript Programming. But one thing for sure, to learn any programming language, not only Javascript, you just need to code, and code and finally code until you become expert.\nHello World using Javascript\nJust to give you a little excitement about Javascript programming, I'm going to give you a small conventional Javascript Hello World program, You can try it using Demo link\nLive Demo\n<html>\n<body>\n<script language = \"javascript\" type = \"text/javascript\">\n<!--\ndocument.write(\"Hello World!\")\n//-->\n</script>\n</body>\n</html>\nThere are many useful Javascript frameworks and libraries available:\nAngular\nReact\njQuery\nVue.js\nExt.js\nEmber.js\nMeteor\nMithril\nNode.js\nPolymer\nAurelia\nBackbone.js\nIt is really impossible to give a complete list of all the available Javascript frameworks and libraries. The Javascript world is just too large and too much new is happening.\nApplications of Javascript Programming\nAs mentioned before, Javascript is one of the most widely used programming languages (Front-end as well as Back-end). It has it's presence in almost every area of software development. I'm going to list few of them here:\nClient side validation - This is really important to verify any user input before submitting it to the server and Javascript plays an important role in validting those inputs at front-end itself.\nManipulating HTML Pages - Javascript helps in manipulating HTML page on the fly. This helps in adding and deleting any HTML tag very easily using javascript and modify your HTML to change its look and feel based on different devices and requirements.\nUser Notifications - You can use Javascript to raise dynamic pop-ups on the webpages to give different types of notifications to your website visitors.\nBack-end Data Loading - Javascript provides Ajax library which helps in loading back-end data while you are doing some other processing. This really gives an amazing experience to your website visitors.\nPresentations - JavaScript also provides the facility of creating presentations which gives website look and feel. JavaScript provides RevealJS and BespokeJS libraries to build a web-based slide presentations.\nServer Applications - Node JS is built on Chrome's Javascript runtime for building fast and scalable network applications. This is an event based library which helps in developing very sophisticated server applications including Web Servers.\nThis list goes on, there are various areas where millions of software developers are happily using Javascript to develop great websites and others softwares.\nAudience\nThis tutorial has been prepared for JavaScript beginners to help them understand the basic functionality of JavaScript to build dynamic web pages and web applications.\nPrerequisites\nFor this Javascript tutorial, it is assumed that the reader have a prior knowledge of HTML coding. It would help if the reader had some prior exposure to object-oriented programming concepts and a general idea on creating online applications.\nPrevious Page\nPrint Page\nNext Page\nAdvertisements\nAbout us\nRefund Policy\nTerms of use\nPrivacy Policy\nFAQ's\nContact\n© Copyright 2022. All Rights Reserved.\nWe make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy.\nAgree\nLearn more\n","title":"Javascript Tutorial","images":["/static/images/logo-color.png","/static/images/logo-color-b.png","/javascript/images/javascript-mini-logo.jpg","/javascript/images/javascript-video-tutorials.jpg","/javascript/images/javascript.jpg","/static/images/logo-color-footer.png","/static/images/logo-footer-b.png"]},{"id":3,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=vrj9AohVhPA","title":"Node.js, Express & MySQL Tutorial"},{"id":4,"query_date":"07/01/2022","url":"https://www.javascripttutorial.net/","body":"\nSkip to content\nHomeES6AdvancedJavaScript Array MethodsJavaScript String MethodsRegular ExpressionsES NextJS BOMJS DOMWeb APISnippetsTypeScript\nDark Mode\nLight Mode\nJavaScript TutorialWelcome to the JavaScriptTutorial.net website! This JavaScript Tutorial helps you learn the JavaScript programming language from scratch quickly and effectively.<img src=\"https://www.javascripttutorial.net/wp-content/uploads/2021/04/JavaScript-Tutorial.svg\" alt=\"JavaScript Tutorial\" class=\"wp-image-88301\" width=\"150\" height=\"150\" title=\"JavaScript Tutorial\"/>If you…Are not sure where to start learning JavaScript.Are frustrated with copy-n-paste JavaScript code from others without really understanding it.Cannot add richer and more compelling features to your websites and web applications using JavaScript because you don’t know how to get much out of the language.JavaScriptTutorial.net is a good place to start.Section 1. Getting startedWhat is JavaScript? – introduce you to JavaScript and its history.Install a JavaScript source code editor – learn how to install the Visual Studio Code for editing JavaScript code.Meet the Console Tab of Web Development Tools – provide you with a basic introduction to the Console window on the web browsers.JavaScript Hello World – learn how to execute the first JavaScript code that displays the famous \"Hello, World!\" message.Section 2. FundamentalsSyntax – explain the JavaScript syntax, including whitespace, statements, identifiers, keywords,\nexpressions, and comments.Variables –\nshow you how to declare variables.Data types – introduce to you the JavaScript data types, including primitive and reference types.Number – learn how JavaScript use the Number type to represent the integer and floating-point numbers.Numeric Separator– show you how to make the numbers more readable by using underscores as numeric separators.Octal & binary literals –\nprovide support for binary literals and change the way to represent octal literals.Boolean – introduce you to the Boolean type.String – learn about string primitive type and some basic string operations.Object – introduce you to the object type.Primitive vs. reference values – understand two value types in JavaScript, including primitive and reference values, and the differences between them.Array – introduce you to the Array type and how to manipulate array elements.Section 3. OperatorsArithmetic operators – introduce to you the arithmetic operators including addition (+), subtraction (-), multiplication (*), and division (/).Remainder operator – show you how to use the remainder operator (%) to get the remainder left over when one value is divided by another value.Assignment operators – guide you on how to use assignment operators (=) to assign a value\nor an expression to a variable.Unary operators – learn how to use unary operators.Comparison operators – show you how to use comparison operators to compare two values.Logical operators – learn how to use the logical operators: NOT (!), AND (&&), and OR (||).Logical assignment operators – introduce to you the logical assignment operators, including ||=, &&=, and ??=Nullish coalescing operator (??) – accept two values and return the second value if the first one is null or undefined.Exponentiation operator – introduce you to the exponentiation operator (**) that calculates a base to the exponent power, which is similar to Math.pow() method.Section 4. Control flow Statementsif – show you how use the if statement to execute a block if a condition is true.if…else – learn how to execute a block of code based on a specified condition.if…else…if – check multiple conditions and execute a block.Ternary operators – show you how to make a shortcut for the if statement ( ?:).switch – show you how to replace multiple if statements when comparing a value with multiple variants by using the switch statement.while – learn how to perform a pre-test loop that repeatedly executes a block of code as long as a specified condition is true.do…while – show you how to carry a post-test loop that executes a block of code repeatedly until a specified condition is false.for loop – learn how to repeatedly execute a block of code based on various options.break – learn how to prematurely terminate a loop.continue – show you how to skip the current iteration of a loop and jump to the next one.Comma operator – guide you on how to use the comma operator in a for loop to update multiple variables at once.Section 5. FunctionsFunctions – introduce you to functions in JavaScript.Functions are the first-class citizens – learn how to store functions in the variables, pass functions into other functions as arguments, and return functions as values.Anonymous Functions – learn about anonymous functions which are the functions without names.Pass-by-value – understand how pass-by-value works in JavaScript.Recursive function – learn how to define recursive functions.Default Parameters – show you how to define default parameters for functions.Section 6. Objects & PrototypesObject Methods – introduce you to the methods of an object.Constructor functions – show you how to use constructor functions to define custom types in JavaScript.Prototype – learn how the prototype works in JavaScript.Constructor/Prototype pattern – show you how to combine the constructor function and prototype pattern to define custom types.Prototypal inheritance – understand prototypal inheritance in JavaScript.What is this in JavaScript – understand the this value and how it works in JavaScript.globalThis – provide a standard way to access the global object across environments.Object Properties – dive into the object’s properties and their attributes.for…in loop – learn how to iterate over properties of an object using the for...in loop.Enumerable Properties – learn more about the enumerable properties.Own Properties – understand the own and inherited properties.Object.values() – return own enumerable property’s values of an object as an array.Object.entries() – return own enumerable string-keyed property [key, value] pairs of an object.Object.assign() – copy an object or merge objects.Object.is() – check if two values are the same value.Factory functions – learn about the factory functions which are functions that return objects.Object Destructuring – learn how to assign properties of an object to variables.Optional chaining operator (?.) – simplify the way to access a property located deep within a chain of connected objects without having to check if each reference in the chain is null or undefined.Object literal syntax extensions – provide a new way to define object literal.Section 7. ClassesClass – introduce you to the ES6 class syntax and how to declare a class.Getters and Setters – define the getters and setters for a class using the get and set keywords.Class Expression – learn an alternative way to define a new class using a class expression.Computed property – explain the computed property and its practical application.Inheritance –\nshow you how to extend a class using the extends and super keywords.new.target – introduce you to the new.target metaproperty.Static methods – guide you on how to define methods associated with a class, not instances of that class.Static Properties – show you how to define static properties shared by all instances of a class.Private Fields – learn how to define private fields in a class.Private Methods – show you how to define private methods in a class.Section 8. Advanced FunctionsFunction type – introduce you to the Function type and its properties and methods.call()– understand the call() method and learn how to use it effectively.apply() – learn how to use the apply() method effectively.bind() – understand the bind() method and how to apply it effectively.Closure – understand the closures in JavaScript.Immediately Invoked Function Expression (IIFE) – learn about immediately invoked function expressions (IIFE).Returning multiple values – guide you on how to return multiple values from a function.Arrow functions – introduce you to the arrow functions ( =>)Arrow functions: when you should not use – learn when not to use the arrow functions.Rest parameter – introduce you to the rest parameter and how to use them effectively.Callback functions – introduce you to the callback functions and learn how to use the callbacks to handle asynchronous operations.Section 9. Promises & Async/AwaitPromises – learn about Javascript Promises, what they are, and how to use them effectively.Promise chaining – show you how to execute multiple asynchronous operations in sequence.Promise composition: Promise.all() & Promise.race() – learn how to compose a new promise out of several promises.Promise.any() – learn how to use the JavaScript Promise.any() method to return the first Promise that fulfills.Promise.allSettled() – accept a list of promises and returns a new promise that resolves to an array of values, which were settled (either resolved or rejected) by the input promises.Promise.prototype.finally() – execute a piece of code when the promise is settled, regardless of its outcome.Promise error handling – guide you on how to handle errors in promises.async / await – write asynchronous code in a clearer syntax.Section 10. Iterators & GeneratorsIterators – introduce you to the iteration and iterator protocols.Generators – develop functions that can pause midway and then continue from where they paused.yield – dive into how to use the yield keyword in generators.for…of – learn how to use the for...of loop to iterate over elements of an iterable object.Asynchronous iterators – learn how to use async iterators to access asynchronous data sources sequentially.Async generators – show you how to create an async generator.Section 11. ModulesModules – learn how to write modular JavaScript code.Dynamic import – show you how to import a module dynamically via the function-like object import().Top-level await – explain top-level await module and its use cases.Section 12. SymbolSymbol – introduce you to a new primitive type called symbol in ES6Section 13. CollectionsMap – introduce you to the Map type that holds a collection of key-value pairs.Set – learn how to use the Set type that holds a collection of unique values.Section 14. Error handlingtry…catch – show you how to handle exceptions gracefully.try…catch…finally – learn how to catch exceptions and execut a block whether the exceptions occur or not.throw – show you how to throw an exception.Optional catch binding – omit the exception variable in the catch block.Section 15. JavaScript var, let, and constlet – declare block-scoped variables using the let keyword.let vs. var – understand the differences between let and var.const – define constants using the const keyword.Section 16. Proxy & ReflectionProxy – learn how to use the proxy object that wraps another object (target) and intercepts the fundamental operations of the target object.Reflection –\nshow you how to use ES6 Reflection API to manipulate variables, properties, and methods of objects at runtime.Section 17. JavaScript RuntimeExecution Contexts – understand execution contexts including global and function execution contexts.Call Stack – understand the call stack.Event Loop – show you how JavaScript handles asynchronous operations using the event loop.Hoisting – learn how hoisting works in JavaScript.Variable scopes – introduce you to the variable scopes.Section 18. Primitive Wrapper TypesPrimitive wrapper types – learn how primitive wrapper types work in JavaScript.Boolean – introduce you to the Boolean primitive wrapper type.Number – learn about the Number primitive wrapper type.BigInt – introduce you to the BigInt type that represent the big integers.String type – introduce you to the String type.\nSearch for:\nGetting StartedWhat is JavaScriptInstall a JavaScript Code EditorMeet the Console Tab of DevtoolsJavaScript Hello WorldJavaScript FundamentalsSyntaxVariablesData TypesNumberNumeric SeparatorOctal and Binary LiteralsBooleanStringObjectPrimitive vs. Reference ValuesArrayJavaScript OperatorsArithmetic OperatorsRemainder OperatorAssignment OperatorsUnary OperatorsComparison OperatorsLogical OperatorsLogical Assignment OperatorsNullish Coalescing OperatorExponentiation OperatorControl Flowifif elseif else ifTernary Operator (:?)switch casewhiledo whileforbreakcontinueComma OperatorJavaScript FunctionsFunctionsFunctions are First-Class CitizensAnonymous FunctionsUnderstanding Pass-By-Value in JavaScriptRecursive FunctionsDefault ParametersJavaScript ObjectsObject MethodsConstructor FunctionsPrototypeConstructor/Prototype PatternPrototypal InheritancethisglobalThisObject Propertiesfor…in LoopEnumerable PropertiesOwn PropertiesObject.values()Object.entries()Object.is()Factory FunctionsObject DestructuringOptional Chaining OperatorObject Literal Syntax ExtensionsClassesClassGetters & SettersClass ExpressionsComputed PropertiesInheritancenew.targetStatic MethodsStatic PropertiesPrivate FieldsPrivate Methodsinstanceof OperatorAdvanced FunctionsFunction TypeThe call() MethodThe apply() methodThe bind() MethodClosuresImmediately Invoked Function Expression (IIFE)Returning Multiple ValuesArrow FunctionsArrow Functions: Do & Don’tRest ParametersCallbackPromises & Async/AwaitPromisesPromise ChainingPromise.all()Promise.race()Promise.any()Promise.allSettled()Promise.prototype.finally()Promise Error Handlingasync/awaitJavaScript ModulesModulesDynamic ImportTop-level Await ModulesJavascript Error Handlingtry…catchtry…catch…finallyThrow an ExceptionOptional catch BindingJavaScript RuntimeExecution ContextCall StackEvent LoopHoistingVariable ScopesAbout JavaScript TutorialThe JavaScript Tutorial website helps you learn JavaScript programming from scratch quickly and effectively.ReferencesArray MethodsString MethodsRegular ExpressionsLatest TutorialsJavaScript String repeat()JavaScript toLowerCase()JavaScript toUpperCase()JavaScript Regex ReplaceJavaScript Regex LookbehindSite LinksDonation ❤️About UsContact UsPrivacy PolicyCopyright © 2022 by JavaScript Tutorial Website. All Right Reserved. <style>.lazyload{display:none;}</style>\n","title":"JavaScript TutorialDark ModeLight Mode","images":["data:image/svg+xml,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20150%20150%22%3E%3C/svg%3E"]},{"id":5,"query_date":"07/01/2022","url":"https://www.w3schools.com/js/default.asp","body":"\nTutorials\nReferences\nExercises\nVideos\nMenu\nLog in\nWebsite\nGet Certified\nPro NEW\nHTML\nCSS\nJAVASCRIPT\nSQL\nPYTHON\nPHP\nBOOTSTRAP\nHOW TO\nW3.CSS\nJAVA\nJQUERY\nC\nC++\nC#\nR\nReact\n\n\n\nDark mode\nDark code\n×\nTutorials\nHTML and CSS\nLearn HTML\nLearn CSS\nLearn RWD\nLearn Bootstrap\nLearn W3.CSS\nLearn Colors\nLearn Icons\nLearn Graphics\nLearn SVG\nLearn Canvas\nLearn How To\nLearn Sass\nData Analytics\nLearn AI\nLearn Machine Learning\nLearn Data Science\nLearn NumPy\nLearn Pandas\nLearn SciPy\nLearn Matplotlib\nLearn Statistics\nLearn Excel\nXML Tutorials\nLearn XML\nLearn XML AJAX\nLearn XML DOM\nLearn XML DTD\nLearn XML Schema\nLearn XSLT\nLearn XPath\nLearn XQuery\nJavaScript\nLearn JavaScript\nLearn jQuery\nLearn React\nLearn AngularJS\nLearn JSON\nLearn AJAX\nLearn AppML\nLearn W3.JS\nProgramming\nLearn Python\nLearn Java\nLearn C\nLearn C++\nLearn C#\nLearn R\nLearn Kotlin\nLearn Go\nLearn Django\nLearn TypeScript\nServer Side\nLearn SQL\nLearn MySQL\nLearn PHP\nLearn ASP\nLearn Node.js\nLearn Raspberry Pi\nLearn Git\nLearn AWS Cloud\nWeb Building\nCreate a Website NEW\nWhere To Start\nWeb Templates\nWeb Statistics\nWeb Certificates\nWeb Development\nCode Editor\nTest Your Typing Speed\nPlay a Code Game\nCyber Security\nAccessibility\nData Analytics\nLearn AI\nLearn Machine Learning\nLearn Data Science\nLearn NumPy\nLearn Pandas\nLearn SciPy\nLearn Matplotlib\nLearn Statistics\nLearn Excel\nLearn Google Sheets\nXML Tutorials\nLearn XML\nLearn XML AJAX\nLearn XML DOM\nLearn XML DTD\nLearn XML Schema\nLearn XSLT\nLearn XPath\nLearn XQuery\n×\nReferences\nHTML\nHTML Tag Reference\nHTML Browser Support\nHTML Event Reference\nHTML Color Reference\nHTML Attribute Reference\nHTML Canvas Reference\nHTML SVG Reference\nGoogle Maps Reference\nCSS\nCSS Reference\nCSS Browser Support\nCSS Selector Reference\nBootstrap 3 Reference\nBootstrap 4 Reference\nW3.CSS Reference\nIcon Reference\nSass Reference\nJavaScript\nJavaScript Reference\nHTML DOM Reference\njQuery Reference\nAngularJS Reference\nAppML Reference\nW3.JS Reference\nProgramming\nPython Reference\nJava Reference\nServer Side\nSQL Reference\nMySQL Reference\nPHP Reference\nASP Reference\nXML\nXML DOM Reference\nXML Http Reference\nXSLT Reference\nXML Schema Reference\nCharacter Sets\nHTML Character Sets\nHTML ASCII\nHTML ANSI\nHTML Windows-1252\nHTML ISO-8859-1\nHTML Symbols\nHTML UTF-8\n×\nExercises and Quizzes\nExercises\nHTML Exercises\nCSS Exercises\nJavaScript Exercises\nSQL Exercises\nMySQL Exercises\nPHP Exercises\nPython Exercises\nNumPy Exercises\nPandas Exercises\nSciPy Exercises\njQuery Exercises\nJava Exercises\nC++ Exercises\nC# Exercises\nR Exercises\nKotlin Exercises\nGo Exercises\nBootstrap Exercises\nBootstrap 4 Exercises\nBootstrap 5 Exercises\nGit Exercises\nQuizzes\nHTML Quiz\nCSS Quiz\nJavaScript Quiz\nSQL Quiz\nMySQL Quiz\nPHP Quiz\nPython Quiz\nNumPy Quiz\nPandas Quiz\nSciPy Quiz\njQuery Quiz\nJava Quiz\nC++ Quiz\nC# Quiz\nR Quiz\nKotlin Quiz\nXML Quiz\nBootstrap Quiz\nBootstrap 4 Quiz\nBootstrap 5 Quiz\nCyber Security Quiz\nAccessibility Quiz\nCourses\nHTML Course\nCSS Course\nJavaScript Course\nFront End Course\nSQL Course\nPHP Course\nPython Course\nNumPy Course\nPandas Course\nData Analytics Course\njQuery Course\nJava Course\nC++ Course\nC# Course\nR Course\nXML Course\nCyber Security Course\nAccessibility Course\nCertificates\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPHP Certificate\nPython Certificate\nData Science Certificate\nBootstrap 3 Certificate\nBootstrap 4 Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nReact Certificate\nXML Certificate\n×\nTutorials\nReferences\nExercises\nPaid Courses\nSpaces\nVideos\nShop\nPro\nJS Tutorial\nJS HOME\nJS Introduction\nJS Where To\nJS Output\nJS Statements\nJS Syntax\nJS Comments\nJS Variables\nJS Let\nJS Const\nJS Operators\nJS Arithmetic\nJS Assignment\nJS Data Types\nJS Functions\nJS Objects\nJS Events\nJS Strings\nJS String Methods\nJS String Search\nJS String Templates\nJS Numbers\nJS Number Methods\nJS Arrays\nJS Array Methods\nJS Array Sort\nJS Array Iteration\nJS Array Const\nJS Dates\nJS Date Formats\nJS Date Get Methods\nJS Date Set Methods\nJS Math\nJS Random\nJS Booleans\nJS Comparisons\nJS If Else\nJS Switch\nJS Loop For\nJS Loop For In\nJS Loop For Of\nJS Loop While\nJS Break\nJS Iterables\nJS Sets\nJS Maps\nJS Typeof\nJS Type Conversion\nJS Bitwise\nJS RegExp\nJS Errors\nJS Scope\nJS Hoisting\nJS Strict Mode\nJS this Keyword\nJS Arrow Function\nJS Classes\nJS Modules\nJS JSON\nJS Debugging\nJS Style Guide\nJS Best Practices\nJS Mistakes\nJS Performance\nJS Reserved Words\nJS Versions\nJS Versions\nJS 2009 (ES5)\nJS 2015 (ES6)\nJS 2016\nJS 2017\nJS 2018\nJS IE / Edge\nJS History\nJS Objects\nObject Definitions\nObject Properties\nObject Methods\nObject Display\nObject Accessors\nObject Constructors\nObject Prototypes\nObject Iterables\nObject Sets\nObject Maps\nObject Reference\nJS Functions\nFunction Definitions\nFunction Parameters\nFunction Invocation\nFunction Call\nFunction Apply\nFunction Bind\nFunction Closures\nJS Classes\nClass Intro\nClass Inheritance\nClass Static\nJS Async\nJS Callbacks\nJS Asynchronous\nJS Promises\nJS Async/Await\nJS HTML DOM\nDOM Intro\nDOM Methods\nDOM Document\nDOM Elements\nDOM HTML\nDOM Forms\nDOM CSS\nDOM Animations\nDOM Events\nDOM Event Listener\nDOM Navigation\nDOM Nodes\nDOM Collections\nDOM Node Lists\nJS Browser BOM\nJS Window\nJS Screen\nJS Location\nJS History\nJS Navigator\nJS Popup Alert\nJS Timing\nJS Cookies\nJS Web APIs\nWeb API Intro\nWeb Forms API\nWeb History API\nWeb Storage API\nWeb Worker API\nWeb Fetch API\nWeb Geolocation API\nJS AJAX\nAJAX Intro\nAJAX XMLHttp\nAJAX Request\nAJAX Response\nAJAX XML File\nAJAX PHP\nAJAX ASP\nAJAX Database\nAJAX Applications\nAJAX Examples\nJS JSON\nJSON Intro\nJSON Syntax\nJSON vs XML\nJSON Data Types\nJSON Parse\nJSON Stringify\nJSON Objects\nJSON Arrays\nJSON Server\nJSON PHP\nJSON HTML\nJSON JSONP\nJS vs jQuery\njQuery Selectors\njQuery HTML\njQuery CSS\njQuery DOM\nJS Graphics\nJS Graphics\nJS Canvas\nJS Plotly\nJS Chart.js\nJS Google Chart\nJS D3.js\nJS Examples\nJS Examples\nJS HTML DOM\nJS HTML Input\nJS HTML Objects\nJS HTML Events\nJS Browser\nJS Editor\nJS Exercises\nJS Quiz\nJS Certificate\nJS References\nJavaScript Objects\nHTML DOM Objects\nJavaScript Tutorial\n❮ Home\nNext ❯\nJavaScript is the world's most popular programming language.\nJavaScript is the programming language of the Web.\nJavaScript is easy to learn.\nThis tutorial will teach you JavaScript from basic to advanced.\nStart learning JavaScript now »\nExamples in Each Chapter\nWith our \"Try it Yourself\" editor, you can edit the source code and view\nthe result.\nExample\nMy First JavaScript\nClick me to display Date and Time\nTry it Yourself »\nUse the Menu\nWe recommend reading this tutorial, in the sequence listed in the menu.\nIf you have a large screen, the menu will always be present on the left.\nIf you have a small screen, open the menu by clicking the top menu sign ☰.\nLearn by Examples\nExamples are better than 1000 words. Examples are often easier to understand\nthan text explanations.\nThis tutorial supplements all explanations with clarifying \"Try it Yourself\" examples.\nIf you try all the examples, you will learn a lot about JavaScript, in a very short time!\nJavaScript Examples »\nWhy Study JavaScript?\nJavaScript is one of the 3 languages all web developers\nmust\nlearn:\n1. HTML to define the content of web pages\n2. CSS to specify the layout of web pages\n3. JavaScript to program the behavior of web pages\nThis tutorial covers every version of JavaScript:\nThe Original JavaScript ES1 ES2 ES3 (1997-1999)\nThe First Main Revision ES5 (2009)\nThe Second Revision ES6 (2015)\nThe Yearly Additions (2016, 2017, 2018)\nLearning Speed\nIn this tutorial, the learning speed is your choice.\nEverything is up to you.\nIf you are struggling, take a break, or re-read the material.\nAlways make sure you understand all the \"Try-it-Yourself\"\nexamples.\nThe only way to become a clever programmer is to:\nPractice. Practice. Practice. Code. Code. Code !\nTest Yourself With Exercises\nExercise:\nCreate a variable called carName and assign the value Volvo to it.\nvar\n= \"\";\nSubmit Answer »\nStart the Exercise\nCommonly Asked Questions\nHow do I get JavaScript?\nWhere can I download JavaScript?\nIs JavaScript Free?\nYou don't have to get or download JavaScript.\nJavaScript is already running in your browser on your computer,\non your tablet, and on your smart-phone.\nJavaScript is free to use for everyone.\nJavaScript References\nW3Schools maintains a complete JavaScript reference, including all HTML and browser objects.\nThe reference contains examples for all properties, methods and events, and\nis continuously updated according to the latest web standards.\nComplete JavaScript Reference »\nJavaScript Quiz Test\nTest your JavaScript skills at W3Schools!\nStart JavaScript Quiz!\nKickstart your career\nGet certified by completing the\ncourse\nGet certified\nw3schools CERTIFIED\n.\n2022\n❮ Home\nNext ❯\nNEW\nWe just launchedW3Schools videos\nExplore now\nCOLOR PICKER\nGet certifiedby completinga course today!\nw3schools CERTIFIED\n.\n2022\nGet started\nCODE GAME\nPlay Game\nReport Error\nForum\nAbout\nBuy Certificate\n×\nReport Error\nIf you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail:\nhelp@w3schools.com\n×\nThank You For Helping Us!\nYour message has been sent to W3Schools.\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\nWeb Courses\nHTML Course\nCSS Course\nJavaScript Course\nFront End Course\nSQL Course\nPython Course\nPHP Course\njQuery Course\nJava Course\nC++ Course\nC# Course\nXML Course\nGet Certified »\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content.\nWhile using W3Schools, you agree to have read and accepted our terms of use,\ncookie and privacy policy.\nCopyright 1999-2022 by Refsnes Data. All Rights Reserved.\nW3Schools is Powered by W3.CSS.\n","title":"JavaScript Tutorial","images":["/images/htmlvideoad_footer.png","/images/colorpicker2000.png","/images/w3lynx_200.png"]},{"id":6,"query_date":"07/01/2022","url":"https://www.w3schools.com/css/default.asp.","body":"\nSorry!\nWe can't seem to find the resource you're looking for.\nPlease check that the Web site address is spelled correctly.Or go to our home page, and use the menus to navigate to a specific section.\n","title":"404 - Page not found | W3Schools.com","images":[]},{"id":7,"query_date":"07/01/2022","url":"https://www.w3schools.com/html/default.asp","body":"\nTutorials\nReferences\nExercises\nVideos\nMenu\nLog in\nWebsite\nGet Certified\nPro NEW\nHTML\nCSS\nJAVASCRIPT\nSQL\nPYTHON\nPHP\nBOOTSTRAP\nHOW TO\nW3.CSS\nJAVA\nJQUERY\nC\nC++\nC#\nR\nReact\n\n\n\nDark mode\nDark code\n×\nTutorials\nHTML and CSS\nLearn HTML\nLearn CSS\nLearn RWD\nLearn Bootstrap\nLearn W3.CSS\nLearn Colors\nLearn Icons\nLearn Graphics\nLearn SVG\nLearn Canvas\nLearn How To\nLearn Sass\nData Analytics\nLearn AI\nLearn Machine Learning\nLearn Data Science\nLearn NumPy\nLearn Pandas\nLearn SciPy\nLearn Matplotlib\nLearn Statistics\nLearn Excel\nXML Tutorials\nLearn XML\nLearn XML AJAX\nLearn XML DOM\nLearn XML DTD\nLearn XML Schema\nLearn XSLT\nLearn XPath\nLearn XQuery\nJavaScript\nLearn JavaScript\nLearn jQuery\nLearn React\nLearn AngularJS\nLearn JSON\nLearn AJAX\nLearn AppML\nLearn W3.JS\nProgramming\nLearn Python\nLearn Java\nLearn C\nLearn C++\nLearn C#\nLearn R\nLearn Kotlin\nLearn Go\nLearn Django\nLearn TypeScript\nServer Side\nLearn SQL\nLearn MySQL\nLearn PHP\nLearn ASP\nLearn Node.js\nLearn Raspberry Pi\nLearn Git\nLearn AWS Cloud\nWeb Building\nCreate a Website NEW\nWhere To Start\nWeb Templates\nWeb Statistics\nWeb Certificates\nWeb Development\nCode Editor\nTest Your Typing Speed\nPlay a Code Game\nCyber Security\nAccessibility\nData Analytics\nLearn AI\nLearn Machine Learning\nLearn Data Science\nLearn NumPy\nLearn Pandas\nLearn SciPy\nLearn Matplotlib\nLearn Statistics\nLearn Excel\nLearn Google Sheets\nXML Tutorials\nLearn XML\nLearn XML AJAX\nLearn XML DOM\nLearn XML DTD\nLearn XML Schema\nLearn XSLT\nLearn XPath\nLearn XQuery\n×\nReferences\nHTML\nHTML Tag Reference\nHTML Browser Support\nHTML Event Reference\nHTML Color Reference\nHTML Attribute Reference\nHTML Canvas Reference\nHTML SVG Reference\nGoogle Maps Reference\nCSS\nCSS Reference\nCSS Browser Support\nCSS Selector Reference\nBootstrap 3 Reference\nBootstrap 4 Reference\nW3.CSS Reference\nIcon Reference\nSass Reference\nJavaScript\nJavaScript Reference\nHTML DOM Reference\njQuery Reference\nAngularJS Reference\nAppML Reference\nW3.JS Reference\nProgramming\nPython Reference\nJava Reference\nServer Side\nSQL Reference\nMySQL Reference\nPHP Reference\nASP Reference\nXML\nXML DOM Reference\nXML Http Reference\nXSLT Reference\nXML Schema Reference\nCharacter Sets\nHTML Character Sets\nHTML ASCII\nHTML ANSI\nHTML Windows-1252\nHTML ISO-8859-1\nHTML Symbols\nHTML UTF-8\n×\nExercises and Quizzes\nExercises\nHTML Exercises\nCSS Exercises\nJavaScript Exercises\nSQL Exercises\nMySQL Exercises\nPHP Exercises\nPython Exercises\nNumPy Exercises\nPandas Exercises\nSciPy Exercises\njQuery Exercises\nJava Exercises\nC++ Exercises\nC# Exercises\nR Exercises\nKotlin Exercises\nGo Exercises\nBootstrap Exercises\nBootstrap 4 Exercises\nBootstrap 5 Exercises\nGit Exercises\nQuizzes\nHTML Quiz\nCSS Quiz\nJavaScript Quiz\nSQL Quiz\nMySQL Quiz\nPHP Quiz\nPython Quiz\nNumPy Quiz\nPandas Quiz\nSciPy Quiz\njQuery Quiz\nJava Quiz\nC++ Quiz\nC# Quiz\nR Quiz\nKotlin Quiz\nXML Quiz\nBootstrap Quiz\nBootstrap 4 Quiz\nBootstrap 5 Quiz\nCyber Security Quiz\nAccessibility Quiz\nCourses\nHTML Course\nCSS Course\nJavaScript Course\nFront End Course\nSQL Course\nPHP Course\nPython Course\nNumPy Course\nPandas Course\nData Analytics Course\njQuery Course\nJava Course\nC++ Course\nC# Course\nR Course\nXML Course\nCyber Security Course\nAccessibility Course\nCertificates\nHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPHP Certificate\nPython Certificate\nData Science Certificate\nBootstrap 3 Certificate\nBootstrap 4 Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nReact Certificate\nXML Certificate\n×\nTutorials\nReferences\nExercises\nPaid Courses\nSpaces\nVideos\nShop\nPro\nHTML Tutorial\nHTML HOME\nHTML Introduction\nHTML Editors\nHTML Basic\nHTML Elements\nHTML Attributes\nHTML Headings\nHTML Paragraphs\nHTML Styles\nHTML Formatting\nHTML Quotations\nHTML Comments\nHTML Colors\nColors\nRGB\nHEX\nHSL\nHTML CSS\nHTML Links\nLinks\nLink Colors\nLink Bookmarks\nHTML Images\nImages\nImage Map\nBackground Images\nThe Picture Element\nHTML Favicon\nHTML Tables\nHTML Tables\nTable Borders\nTable Sizes\nTable Headers\nPadding & Spacing\nColspan & Rowspan\nTable Styling\nTable Colgroup\nHTML Lists\nLists\nUnordered Lists\nOrdered Lists\nOther Lists\nHTML Block & Inline\nHTML Classes\nHTML Id\nHTML Iframes\nHTML JavaScript\nHTML File Paths\nHTML Head\nHTML Layout\nHTML Responsive\nHTML Computercode\nHTML Semantics\nHTML Style Guide\nHTML Entities\nHTML Symbols\nHTML Emojis\nHTML Charset\nHTML URL Encode\nHTML vs. XHTML\nHTML Forms\nHTML Forms\nHTML Form Attributes\nHTML Form Elements\nHTML Input Types\nHTML Input Attributes\nHTML Input Form Attributes\nHTML Graphics\nHTML Canvas\nHTML SVG\nHTML Media\nHTML Media\nHTML Video\nHTML Audio\nHTML Plug-ins\nHTML YouTube\nHTML APIs\nHTML Geolocation\nHTML Drag/Drop\nHTML Web Storage\nHTML Web Workers\nHTML SSE\nHTML Examples\nHTML Examples\nHTML Quiz\nHTML Exercises\nHTML Certificate\nHTML Summary\nHTML Accessibility\nHTML References\nHTML Tag List\nHTML Attributes\nHTML Global Attributes\nHTML Browser Support\nHTML Events\nHTML Colors\nHTML Canvas\nHTML Audio/Video\nHTML Doctypes\nHTML Character Sets\nHTML URL Encode\nHTML Lang Codes\nHTTP Messages\nHTTP Methods\nPX to EM Converter\nKeyboard Shortcuts\nHTML Tutorial\n❮ Home\nNext ❯\nHTML is the standard markup language for Web pages.\nWith HTML you can create your own Website.\nHTML is easy to learn - You will enjoy it!\nStudy our free HTML Tutorial »\nWatch our Video Tutorial »NEW\nEasy Learning with HTML \"Try it Yourself\"\nWith our \"Try it Yourself\" editor, you can edit the HTML code and view the\nresult:\nExample\n<!DOCTYPE html>\n<html><head><title>Page Title</title>\n</head><body><h1>This is a Heading</h1><p>This is a paragraph.</p>\n</body></html>\nTry it Yourself »\nClick on the \"Try it Yourself\" button to see how it works.\nHTML Examples\nIn this HTML tutorial, you will find more than 200 examples. With our online\n\"Try it Yourself\" editor, you can edit and test each example yourself!\nGo to HTML Examples!\nHTML Exercises\nThis HTML tutorial also contains nearly 100 HTML exercises.\nTest Yourself With Exercises\nExercise:\nAdd a \"tooltip\" to the paragraph below with the text \"About W3Schools\".\n<p =\"About W3Schools\">W3Schools is a web developer's site.</p>\nSubmit Answer »\nStart the Exercise\nHTML Quiz Test\nTest your HTML skills with our HTML Quiz!\nStart HTML Quiz!\nHTML References\nAt W3Schools you will find complete references about HTML elements,\nattributes, events, color names, entities, character-sets, URL encoding,\nlanguage codes, HTTP messages, browser support, and more:\nHTML Elements\nBrowser Support\nAttributes\nGlobal Attributes\nEvent Attributes\nColor Names\nCanvas\nAudio/Video DOM\nCharacter Sets\nURL Encoding\nLanguage Codes\nCountry Codes\nHTTP Messages\nPx to Em Converter\nKeyboard Shortcuts\nKickstart your career\nGet certified by completing the\ncourse\nGet certified\nw3schools CERTIFIED\n.\n2022\n❮ Home\nNext ❯\nNEW\nWe just launchedW3Schools videos\nExplore now\nCOLOR PICKER\nGet certifiedby completinga course today!\nw3schools CERTIFIED\n.\n2022\nGet started\nCODE GAME\nPlay Game\nReport Error\nForum\nAbout\nBuy Certificate\n×\nReport Error\nIf you want to report an error, or if you want to make a suggestion, do not hesitate to send us an e-mail:\nhelp@w3schools.com\n×\nThank You For Helping Us!\nYour message has been sent to W3Schools.\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial\nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference\nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples\nWeb Courses\nHTML Course\nCSS Course\nJavaScript Course\nFront End Course\nSQL Course\nPython Course\nPHP Course\njQuery Course\nJava Course\nC++ Course\nC# Course\nXML Course\nGet Certified »\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content.\nWhile using W3Schools, you agree to have read and accepted our terms of use,\ncookie and privacy policy.\nCopyright 1999-2022 by Refsnes Data. All Rights Reserved.\nW3Schools is Powered by W3.CSS.\n","title":"HTML Tutorial","images":["/images/htmlvideoad_footer.png","/images/colorpicker2000.png","/images/w3lynx_200.png"]},{"id":8,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=EN6Dx22cPRI","title":"Using MySQL With Node.js"},{"id":9,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=hGZX_SA7lYg","title":"NodeJS + MySQL Database Connection Tutorial"},{"id":10,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=C8LgvuEBraI","title":"Learn Go in 12 Minutes"},{"id":11,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=MYh6df4ZybU","title":"Heroku Tutorial"},{"id":12,"query_date":"07/01/2022","url":"https://www.learncpp.com/","body":"\nSite Index\nLatest Changes\nAbout\nSite FAQ\nLeave feedback\nReport an issue\nContact / Support\nSearch\nSearch for:\nSearch\nLearn C++ Skill up with our free tutorials\nSkip to content\nSite Index\nLatest Changes\nAbout\nSite FAQ\nLeave feedback\nReport an issue\nContact / Support\nSearch\nSearch for:\nSearch\nThe C++ Tutorial\nLearnCpp.com is a free website devoted to teaching you how to program in C++. Whether you’ve had any prior programming experience or not, the tutorials on this site will walk you through all the steps to write, compile, and debug your C++ programs, all with plenty of examples.\nBecoming an expert won’t happen overnight, but with a little patience, you’ll get there. And LearnCpp.com will show you the way.\nChapter 0\nIntroduction / Getting Started\n0.1\nIntroduction to these tutorials\n0.2\nIntroduction to programming languages\n0.3\nIntroduction to C/C++\n0.4\nIntroduction to C++ development\n0.5\nIntroduction to the compiler, linker, and libraries\n0.6\nInstalling an Integrated Development Environment (IDE)\n0.7\nCompiling your first program\n0.8\nA few common C++ problems\n0.9\nConfiguring your compiler: Build configurations\n0.10\nConfiguring your compiler: Compiler extensions\n0.11\nConfiguring your compiler: Warning and error levels\n0.12\nConfiguring your compiler: Choosing a language standard\nChapter 1\nC++ Basics\n1.1\nStatements and the structure of a program\n1.2\nComments\n1.3\nIntroduction to objects and variables\n1.4\nVariable assignment and initialization\n1.5\nIntroduction to iostream: cout, cin, and endl\n1.6\nUninitialized variables and undefined behavior\n1.7\nKeywords and naming identifiers\n1.8\nWhitespace and basic formatting\n1.9\nIntroduction to literals and operators\n1.10\nIntroduction to expressions\n1.11\nDeveloping your first program\n1.x\nChapter 1 summary and quiz\nChapter 2\nC++ Basics: Functions and Files\n2.1\nIntroduction to functions\n2.2\nFunction return values (value-returning functions)Split\n2.3\nVoid functions (non-value returning functions)New\n2.4\nIntroduction to function parameters and arguments\n2.5\nIntroduction to local scope\n2.6\nWhy functions are useful, and how to use them effectively\n2.7\nForward declarations and definitions\n2.8\nPrograms with multiple code files\n2.9\nNaming collisions and an introduction to namespaces\n2.10\nIntroduction to the preprocessor\n2.11\nHeader files\n2.12\nHeader guards\n2.13\nHow to design your first programs\n2.x\nChapter 2 summary and quiz\nChapter 3\nDebugging C++ Programs\n3.1\nSyntax and semantic errors\n3.2\nThe debugging process\n3.3\nA strategy for debugging\n3.4\nBasic debugging tactics\n3.5\nMore debugging tactics\n3.6\nUsing an integrated debugger: Stepping\n3.7\nUsing an integrated debugger: Running and breakpoints\n3.8\nUsing an integrated debugger: Watching variables\n3.9\nUsing an integrated debugger: The call stack\n3.10\nFinding issues before they become problems\n3.x\nChapter 3 summary and quiz\nChapter 4\nFundamental Data Types\n4.1\nIntroduction to fundamental data types\n4.2\nVoid\n4.3\nObject sizes and the sizeof operator\n4.4\nSigned integers\n4.5\nUnsigned integers, and why to avoid them\n4.6\nFixed-width integers and size_t\n4.7\nIntroduction to scientific notation\n4.8\nFloating point numbers\n4.9\nBoolean values\n4.10\nIntroduction to if statements\n4.11\nChars\n4.12\nIntroduction to type conversion and static_cast\n4.13\nConst variables and symbolic constantsUpdated\n4.14\nCompile-time constants, constant expressions, and constexprSplit\n4.15\nLiteralsUpdated\n4.16\nNumeral systems (decimal, binary, hexadecimal, and octal)New\n4.17\nIntroduction to std::stringUpdated\n4.18\nIntroduction to std::string_viewMoved\n4.x\nChapter 4 summary and quiz\nChapter 5\nOperators\n5.1\nOperator precedence and associativity\n5.2\nArithmetic operators\n5.3\nModulus and Exponentiation\n5.4\nIncrement/decrement operators, and side effects\n5.5\nComma and conditional operators\n5.6\nRelational operators and floating point comparisons\n5.7\nLogical operators\n5.x\nChapter 5 summary and quiz\nChapter O\nBit Manipulation (optional chapter)\nO.1\nBit flags and bit manipulation via std::bitset\nO.2\nBitwise operators\nO.3\nBit manipulation with bitwise operators and bit masks\nO.4\nConverting between binary and decimal\nChapter 6\nScope, Duration, and Linkage\n6.1\nCompound statements (blocks)\n6.2\nUser-defined namespaces and the scope resolution operator\n6.3\nLocal variables\n6.4\nIntroduction to global variables\n6.5\nVariable shadowing (name hiding)\n6.6\nInternal linkage\n6.7\nExternal linkage and variable forward declarations\n6.8\nWhy (non-const) global variables are evil\n6.9\nSharing global constants across multiple files (using inline variables)\n6.10\nStatic local variables\n6.11\nScope, duration, and linkage summary\n6.12\nUsing declarations and using directives\n6.13\nInline functionsMoved\n6.14\nConstexpr and consteval functionsNew\n6.15\nUnnamed and inline namespaces\n6.x\nChapter 6 summary and quiz\nChapter 7\nControl Flow and Error Handling\n7.1\nControl flow introduction\n7.2\nIf statements and blocks\n7.3\nCommon if statement problems\n7.4\nSwitch statement basics\n7.5\nSwitch fallthrough and scoping\n7.6\nGoto statements\n7.7\nIntro to loops and while statements\n7.8\nDo while statements\n7.9\nFor statements\n7.10\nBreak and continue\n7.11\nHalts (exiting your program early)\n7.12\nIntroduction to testing your code\n7.13\nCode coverage\n7.14\nCommon semantic errors in C++\n7.15\nDetecting and handling errors\n7.16\nstd::cin and handling invalid input\n7.17\nAssert and static_assert\n7.18\nIntroduction to random number generationUpdated\n7.19\nGenerating random numbers using Mersenne TwisterUpdated\n7.x\nChapter 7 summary and quizUpdated\nChapter 8\nType Conversion and Function Overloading\n8.1\nImplicit type conversion (coercion)\n8.2\nFloating-point and integral promotion\n8.3\nNumeric conversions\n8.4\nArithmetic conversions\n8.5\nExplicit type conversion (casting) and static_cast\n8.6\nTypedefs and type aliases\n8.7\nType deduction for objects using the auto keyword\n8.8\nType deduction for functions\n8.9\nIntroduction to function overloading\n8.10\nFunction overload differentiation\n8.11\nFunction overload resolution and ambiguous matches\n8.12\nDefault arguments\n8.13\nFunction templates\n8.14\nFunction template instantiation\n8.15\nFunction templates with multiple template types\n8.x\nChapter 8 summary and quiz\nChapter 9\nCompound Types: References and Pointers\n9.1\nIntroduction to compound data types\n9.2\nValue categories (lvalues and rvalues)\n9.3\nLvalue references\n9.4\nLvalue references to const\n9.5\nPass by lvalue reference\n9.6\nIntroduction to pointers\n9.7\nNull pointers\n9.8\nPointers and const\n9.9\nPass by address\n9.10\nPass by address (part 2)\n9.11\nReturn by reference and return by address\n9.12\nType deduction with pointers, references, and const\n9.x\nChapter 9 summary and quiz\nThe second half of chapter 9 has been moved to chapter 10.\nChapter 10\nCompound Types: Enums and Structs\n10.1\nIntroduction to program-defined (user-defined) types\n10.2\nUnscoped enumerations\n10.3\nUnscoped enumeration input and output\n10.4\nScoped enumerations (enum classes)\n10.5\nIntroduction to structs, members, and member selection\n10.6\nStruct aggregate initialization\n10.7\nDefault member initialization\n10.8\nStruct passing and miscellany\n10.9\nMember selection with pointers and references\n10.10\nClass templatesNew\n10.11\nClass template argument deduction (CTAD) and deduction guidesNew\n10.x\nChapter 10 summary and quizUpdated\n10.y\nUsing a language reference\nLessons in prior chapters 10-13 have been moved to chapters 11-14 to make room for chapter 9 being split.\nChapter 11\nArrays, Strings, and Dynamic Allocation\n11.1\nArrays (Part I)\n11.2\nArrays (Part II)\n11.3\nArrays and loops\n11.4\nSorting an array using selection sort\n11.5\nMultidimensional Arrays\n11.6\nC-style strings\n11.7\nstd::string_view (part 2)\n11.8\nPointers and arrays\n11.9\nPointer arithmetic and array indexing\n11.10\nC-style string symbolic constants\n11.11\nDynamic memory allocation with new and delete\n11.12\nDynamically allocating arrays\n11.13\nFor-each loops\n11.14\nVoid pointers\n11.15\nPointers to pointers and dynamic multidimensional arrays\n11.16\nAn introduction to std::array\n11.17\nAn introduction to std::vector\n11.18\nIntroduction to iterators\n11.19\nIntroduction to standard library algorithms\n11.x\nChapter 11 comprehensive quiz\nChapter 12\nFunctions\n12.1\nFunction Pointers\n12.2\nThe stack and the heap\n12.3\nstd::vector capacity and stack behavior\n12.4\nRecursion\n12.5\nCommand line arguments\n12.6\nEllipsis (and why to avoid them)\n12.7\nIntroduction to lambdas (anonymous functions)\n12.8\nLambda captures\n12.x\nChapter 12 comprehensive quiz\nChapter 13\nBasic Object-oriented Programming\n13.1\nWelcome to object-oriented programming\n13.2\nClasses and class members\n13.3\nPublic vs private access specifiers\n13.4\nAccess functions and encapsulation\n13.5\nConstructors\n13.6\nConstructor member initializer lists\n13.7\nNon-static member initialization\n13.8\nOverlapping and delegating constructors\n13.9\nDestructors\n13.10\nThe hidden “this” pointer\n13.11\nClass code and header files\n13.12\nConst class objects and member functions\n13.13\nStatic member variables\n13.14\nStatic member functions\n13.15\nFriend functions and classes\n13.16\nAnonymous objects\n13.17\nNested types in classes\n13.18\nTiming your code\n13.x\nChapter 13 comprehensive quiz\nChapter 14\nOperator overloading\n14.1\nIntroduction to operator overloading\n14.2\nOverloading the arithmetic operators using friend functions\n14.3\nOverloading operators using normal functions\n14.4\nOverloading the I/O operators\n14.5\nOverloading operators using member functions\n14.6\nOverloading unary operators +, -, and !\n14.7\nOverloading the comparison operators\n14.8\nOverloading the increment and decrement operators\n14.9\nOverloading the subscript operator\n14.10\nOverloading the parenthesis operator\n14.11\nOverloading typecasts\n14.12\nThe copy constructor\n14.13\nCopy initialization\n14.14\nConverting constructors, explicit, and delete\n14.15\nOverloading the assignment operator\n14.16\nShallow vs. deep copying\n14.17\nOverloading operators and function templates\n14.x\nChapter 14 comprehensive quiz\nChapter 15\nReserved for Future Reorganization\nChapter 16\nAn Introduction to Object Relationships\n16.1\nObject relationships\n16.2\nComposition\n16.3\nAggregation\n16.4\nAssociation\n16.5\nDependencies\n16.6\nContainer classes\n16.7\nstd::initializer_list\n16.x\nChapter 16 comprehensive quiz\nChapter 17\nInheritance\n17.1\nIntroduction to inheritance\n17.2\nBasic inheritance in C++\n17.3\nOrder of construction of derived classes\n17.4\nConstructors and initialization of derived classes\n17.5\nInheritance and access specifiers\n17.6\nAdding new functionality to a derived class\n17.7\nCalling inherited functions and overriding behavior\n17.8\nHiding inherited functionality\n17.9\nMultiple inheritance\n17.x\nChapter 17 comprehensive quiz\nChapter 18\nVirtual Functions\n18.1\nPointers and references to the base class of derived objects\n18.2\nVirtual functions and polymorphism\n18.3\nThe override and final specifiers, and covariant return types\n18.4\nVirtual destructors, virtual assignment, and overriding virtualization\n18.5\nEarly binding and late binding\n18.6\nThe virtual table\n18.7\nPure virtual functions, abstract base classes, and interface classes\n18.8\nVirtual base classes\n18.9\nObject slicing\n18.10\nDynamic casting\n18.11\nPrinting inherited classes using operator<<\n18.x\nChapter 18 comprehensive quiz\nChapter 19\nTemplates and Classes\n19.1\nTemplate classes\n19.2\nTemplate non-type parameters\n19.3\nFunction template specialization\n19.4\nClass template specialization\n19.5\nPartial template specialization\n19.6\nPartial template specialization for pointers\n19.x\nChapter 19 comprehensive quiz\nChapter 20\nExceptions\n20.1\nThe need for exceptions\n20.2\nBasic exception handling\n20.3\nExceptions, functions, and stack unwinding\n20.4\nUncaught exceptions and catch-all handlers\n20.5\nExceptions, classes, and inheritance\n20.6\nRethrowing exceptions\n20.7\nFunction try blocks\n20.8\nException dangers and downsides\n20.9\nException specifications and noexcept\n20.x\nChapter 20 comprehensive quiz\nChapter M\nMove Semantics and Smart Pointers\nM.1\nIntro to smart pointers and move semantics\nM.2\nR-value references\nM.3\nMove constructors and move assignment\nM.4\nstd::move\nM.5\nstd::move_if_noexcept\nM.6\nstd::unique_ptr\nM.7\nstd::shared_ptr\nM.8\nCircular dependency issues with std::shared_ptr, and std::weak_ptr\nM.x\nChapter M comprehensive review\nChapter 21\nThe Standard Template Library\n21.1\nThe Standard Library\n21.2\nSTL containers overview\n21.3\nSTL iterators overview\n21.4\nSTL algorithms overview\nChapter 22\nstd::string\n22.1\nstd::string and std::wstring\n22.2\nstd::string construction and destruction\n22.3\nstd::string length and capacity\n22.4\nstd::string character access and conversion to C-style arrays\n22.5\nstd::string assignment and swapping\n22.6\nstd::string appending\n22.7\nstd::string inserting\nChapter 23\nInput and Output (I/O)\n23.1\nInput and output (I/O) streams\n23.2\nInput with istream\n23.3\nOutput with ostream and ios\n23.4\nStream classes for strings\n23.5\nStream states and input validation\n23.6\nBasic file I/O\n23.7\nRandom file I/O\nAppendix A\nMiscellaneous Subjects\nA.1\nStatic and dynamic libraries\nA.2\nUsing libraries with Visual Studio\nA.3\nUsing libraries with Code::Blocks\nA.4\nC++ FAQ\nAppendix B\nC++ Updates\nB.1\nIntroduction to C++11\nB.2\nIntroduction to C++14\nB.3\nIntroduction to C++17\nB.4\nIntroduction to C++20\nAppendix C\nThe End\nC.1\nThe end?\nLatest Changes\n2022 Jun 16Split11.7 -- std::string_view (part 2)2022 Jun 16Moved4.18 -- Introduction to std::string_view2022 Jun 16Revision4.17 -- Introduction to std::string2022 Jun 16Split4.16 -- Numeral systems (decimal, binary, hexadecimal, and octal)2022 Jun 16Revision4.15 -- LiteralsSee all changes\n©2022 Learn C++\n<div style=\"display:none;\"><img src=\"//pixel.quantserve.com/pixel/p-31iz6hfFutd16.gif?labels=Domain.learncpp_com,DomainId.221418\" border=\"0\" height=\"1\" width=\"1\" alt=\"Quantcast\"/></div>\n","title":"Learn C++ – Skill up with our free tutorials","images":["https://www.learncpp.com/blog/wp-content/uploads/learncpp.png","https://www.learncpp.com/blog/wp-content/uploads/stripe.jpg"]},{"id":13,"query_date":"07/01/2022","url":"https://www.tutorialspoint.com/sql/index.htm","body":"\nHome\nCoding Ground\nJobs\nWhiteboard\nTools\nBusiness\nTeach with us\nLogin\nCategory\nAcademic Tutorials\nBig Data & Analytics\nComputer Programming\nComputer Science\nDatabases\nDevOps\nDigital Marketing\nEngineering Tutorials\nExams Syllabus\nFamous Monuments\nGATE Exams\nLatest Technologies\nMachine Learning\nMainframe Development\nManagement Tutorials\nMathematics Tutorials\nMicrosoft Technologies\nMisc tutorials\nMobile Development\nJava Technologies\nPython Technologies\nSAP Tutorials\nProgramming Scripts\nSelected Reading\nSoftware Quality\nSoft Skills\nTelecom Tutorials\nUPSC IAS Exams\nWeb Development\nSports Tutorials\nXML Technologies\nMulti-Language\nInterview Questions\nPrime Packs\nCourses\neBooks\nLibrary\nQ/A\nLogin\nSQL Tutorial\nSQL - Home\nSQL - Overview\nSQL - RDBMS Concepts\nSQL - Databases\nSQL - Syntax\nSQL - Data Types\nSQL - Operators\nSQL - Expressions\nSQL - Create Database\nSQL - Drop Database\nSQL - Select Database\nSQL - Create Table\nSQL - Drop Table\nSQL - Insert Query\nSQL - Select Query\nSQL - Where Clause\nSQL - AND & OR Clauses\nSQL - Update Query\nSQL - Delete Query\nSQL - Like Clause\nSQL - Top Clause\nSQL - Order By\nSQL - Group By\nSQL - Distinct Keyword\nSQL - Sorting Results\nAdvanced SQL\nSQL - Constraints\nSQL - Using Joins\nSQL - Unions Clause\nSQL - NULL Values\nSQL - Alias Syntax\nSQL - Indexes\nSQL - Alter Command\nSQL - Truncate Table\nSQL - Using Views\nSQL - Having Clause\nSQL - Transactions\nSQL - Wildcards\nSQL - Date Functions\nSQL - Temporary Tables\nSQL - Clone Tables\nSQL - Sub Queries\nSQL - Using Sequences\nSQL - Handling Duplicates\nSQL - Injection\nSQL Useful Resources\nSQL - Database Tuning\nSQL - Questions and Answers\nSQL - Quick Guide\nSQL - Useful Functions\nSQL - Useful Resources\nSQL - Discussion\nSelected Reading\nUPSC IAS Exams Notes\nDeveloper's Best Practices\nQuestions and Answers\nEffective Resume Writing\nHR Interview Questions\nComputer Glossary\nWho is Who\nSQL Tutorial\nPDF Version\nQuick Guide\nResources\nJob Search\nDiscussion\nSQL is a database computer language designed for the retrieval and management of data in a relational database. SQL stands for Structured Query Language. This tutorial will give you a quick start to SQL. It covers most of the topics required for a basic understanding of SQL and to get a feel of how it works.\nWhy to Learn SQL?\nSQL is Structured Query Language, which is a computer language for storing, manipulating and retrieving data stored in a relational database.\nSQL is the standard language for Relational Database System. All the Relational Database Management Systems (RDMS) like MySQL, MS Access, Oracle, Sybase, Informix, Postgres and SQL Server use SQL as their standard database language.\nAlso, they are using different dialects, such as −\nMS SQL Server using T-SQL,\nOracle using PL/SQL,\nMS Access version of SQL is called JET SQL (native format) etc.\nApplications of SQL\nAs mentioned before, SQL is one of the most widely used query language over the databases. I'm going to list few of them here:\nAllows users to access data in the relational database management systems.\nAllows users to describe the data.\nAllows users to define the data in a database and manipulate that data.\nAllows to embed within other languages using SQL modules, libraries & pre-compilers.\nAllows users to create and drop databases and tables.\nAllows users to create view, stored procedure, functions in a database.\nAllows users to set permissions on tables, procedures and views.\nAudience\nThis SQL tutorial is prepared for beginners to help them understand the basic as well as the advanced concepts related to SQL languages. This tutorial will give you enough understanding on the various components of SQL along with suitable examples.\nPrerequisites\nBefore you start practicing with various types of examples given in this tutorial, I am assuming that you are already aware about what a database is, especially the RDBMS and what is a computer programming language.\nPrevious Page\nPrint Page\nNext Page\nAdvertisements\nAbout us\nRefund Policy\nTerms of use\nPrivacy Policy\nFAQ's\nContact\n© Copyright 2022. All Rights Reserved.\nWe make use of cookies to improve our user experience. By using this website, you agree with our Cookies Policy.\nAgree\nLearn more\n","title":"SQL Tutorial","images":["/static/images/logo-color.png","/static/images/logo-color-b.png","/sql/images/sql-mini-logo.jpg","/sql/images/sql.jpg","/static/images/logo-color-footer.png","/static/images/logo-footer-b.png"]},{"id":14,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=RXN7169vBGw","title":"Async"},{"id":15,"query_date":"07/01/2022","url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function","body":"Skip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allMDN PlusMDN PlusOverviewMore MDN. Your MDN.FAQFrequently asked questions about MDN PlusSearch MDNClear search inputSearchThemeAlready a subscriber?Get MDN PlusReferencesJavaScriptJavaScriptStatements and declarationsasync functionArticle ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoRelated Topics\nJavaScript\nTutorials:\nComplete beginners\nJavaScript basics\nJavaScript first steps\nJavaScript building blocks\nIntroducing JavaScript objects\nJavaScript Guide\nIntroduction\nGrammar and types\nControl flow and error handling\nLoops and iteration\nFunctions\nExpressions and operators\nNumbers and dates\nText formatting\nRegular expressions\nIndexed collections\nKeyed collections\nWorking with objects\nDetails of the object model\nUsing promises\nIterators and generators\nMeta programming\nJavaScript modules\nIntermediate\nClient-side JavaScript frameworks\nClient-side web APIs\nA re-introduction to JavaScript\nJavaScript data structures\nEquality comparisons and sameness\nClosures\nAdvanced\nInheritance and the prototype chain\nStrict mode\nJavaScript typed arrays\nMemory Management\nConcurrency model and Event Loop\nReferences:\nBuilt-in objects\nAggregateErrorArrayArrayBufferAsyncFunctionAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Error\nDeprecated\nescape()eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalErrorIntlisFinite()isNaN()JSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefined\nDeprecated\nunescape()\nNon-Standard\nDeprecated\nuneval()URIErrorWeakMapWeakRefWeakSetWebAssembly\nExpressions & operators\nAddition (+)Addition assignment (+=)Assignment (=)async function expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )importimport.metain operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical nullish assignment (??=)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*\nStatements & declarations\nasync functionblockbreakclassconstcontinuedebuggerdo...whileemptyexportforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhile\nDeprecated\nwith\nFunctions\nThe arguments objectArrow function expressionsDefault parametersgetterMethod definitionsRest parameterssetter\nClasses\nClass static initialization blocksconstructorextendsPrivate class featuresPublic class fieldsstatic\nErrors\nWarning: -file- is being assigned a //# sourceMappingURL, but already has oneTypeError: invalid Array.prototype.sort argumentWarning: 08/09 is not a legal ECMA-262 octal constantRangeError: radix must be an integerSyntaxError: invalid regular expression flag \"x\"SyntaxError: return not in functionTypeError: X.prototype.y called on incompatible typeReferenceError: can't access lexical declaration 'X' before initializationTypeError: can't access property \"x\" of \"y\"TypeError: can't assign to property \"x\" on \"y\": not an objectTypeError: can't define property \"x\": \"obj\" is not extensibleTypeError: property \"x\" is non-configurable and can't be deletedTypeError: can't redefine non-configurable property \"x\"TypeError: cyclic object valueTypeError: can't access dead objectSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedReferenceError: deprecated caller or arguments usageWarning: expression closures are deprecatedSyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadWarning: String.x is deprecated; use String.prototype.x insteadWarning: Date.prototype.toLocaleFormat is deprecatedSyntaxError: test for equality (==) mistyped as assignment (=)?TypeError: setting getter-only property \"x\"SyntaxError: Unexpected '#' used outside of class bodySyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterTypeError: cannot use 'in' operator to search for 'x' in 'y'RangeError: invalid array lengthReferenceError: invalid assignment left-hand sideTypeError: invalid assignment to const \"x\"RangeError: invalid dateSyntaxError: for-in loop head declarations may not have initializersSyntaxError: a declaration in the head of a for-of loop can't have an initializerTypeError: invalid 'instanceof' operand 'x'TypeError: 'x' is not iterableSyntaxError: JSON.parse: bad parsingSyntaxError: Malformed formal parameterURIError: malformed URI sequenceSyntaxError: missing ] after element listSyntaxError: missing : after property idSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing formal parameterSyntaxError: missing = in const declarationSyntaxError: missing name after . operatorSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ; before statementTypeError: More arguments neededRangeError: repeat count must be non-negativeTypeError: \"x\" is not a non-null objectTypeError: \"x\" has no propertiesSyntaxError: missing variable nameTypeError: can't delete non-configurable array elementRangeError: argument is not a valid code pointTypeError: \"x\" is not a constructorTypeError: \"x\" is not a functionReferenceError: \"x\" is not definedRangeError: precision is out of rangeError: Permission denied to access property \"x\"TypeError: \"x\" is read-onlySyntaxError: redeclaration of formal parameter \"x\"TypeError: Reduce of empty array with no initial valueSyntaxError: \"x\" is a reserved identifierRangeError: repeat count must be less than infinityWarning: unreachable code after return statementSyntaxError: \"use strict\" not allowed in function with non-simple parametersInternalError: too much recursionReferenceError: assignment to undeclared variable \"x\"ReferenceError: reference to undefined property \"x\"SyntaxError: Unexpected tokenTypeError: \"x\" is (not) \"y\"SyntaxError: function statement requires a nameSyntaxError: unterminated string literal\nMisc\nJavaScript technologies overview\nLexical grammar\nJavaScript data structures\nEnumerability and ownership of properties\nIteration protocols\nStrict mode\nTransitioning to strict mode\nTemplate literals\nDeprecated features\nIn this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoasync functionAn async function is a function declared with the async keyword, and the await keyword is permitted within it. The async and await keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\nAsync functions may also be defined as\nexpressions.Try itSyntaxasync function name([param[, param[, ...param]]]) {\nstatements\n}\nParameters\nname\nThe function's name.\nparam\nThe name of an argument to be passed to the function.\nstatements\nThe statements comprising the body of the function. The await\nmechanism may be used.\nReturn value\nA Promise which will be resolved with the value returned by the async\nfunction, or rejected with an exception thrown from, or uncaught within, the async\nfunction.\nDescriptionAsync functions can contain zero or more await expressions. Await expressions make promise-returning functions behave as though they're synchronous by suspending execution until the returned promise is fulfilled or rejected. The resolved value of the promise is treated as the return value of the await expression. Use of async and await enables the use of ordinary try / catch blocks around asynchronous code.\nNote: The await keyword is only valid inside async functions within regular JavaScript code. If you use it outside of an async function's body, you will get a SyntaxError.\nawait can be used on its own with JavaScript modules.\nNote: The purpose of async/await is to simplify the syntax\nnecessary to consume promise-based APIs. The behavior\nof async/await is similar to combining generators and\npromises.\nAsync functions always return a promise. If the return value of an async function is\nnot explicitly a promise, it will be implicitly wrapped in a promise.\nFor example, the following:\nasync function foo() {\nreturn 1\n}\n...is similar to:\nfunction foo() {\nreturn Promise.resolve(1)\n}\nNote:\nEven though the return value of an async function behaves as if it's wrapped in a Promise.resolve, they are not equivalent.\nAn async function will return a different reference, whereas Promise.resolve returns the same reference if the given value is a promise.\nIt can be a problem when you want to check the equality of a promise and a return value of an async function.\nconst p = new Promise((res, rej) => {\nres(1);\n})\nasync function asyncReturn() {\nreturn p;\n}\nfunction basicReturn() {\nreturn Promise.resolve(p);\n}\nconsole.log(p === basicReturn()); // true\nconsole.log(p === asyncReturn()); // false\nThe body of an async function can be thought of as being split by zero or more await\nexpressions. Top-level code, up to and including the first await expression (if there is\none), is run synchronously. In this way, an async function without an await expression\nwill run synchronously. If there is an await expression inside the function body,\nhowever, the async function will always complete asynchronously.\nFor example:\nasync function foo() {\nawait 1\n}\n...is equivalent to:\nfunction foo() {\nreturn Promise.resolve(1).then(() => undefined)\n}\nCode after each await expression can be thought of as existing in a .then\ncallback. In this way a promise chain is progressively constructed with each reentrant\nstep through the function. The return value forms the final link in the chain.\nIn the following example, we successively await two promises. Progress moves through\nfunction foo in three stages.\nThe first line of the body of function foo is executed synchronously,\nwith the await expression configured with the pending promise. Progress through\nfoo is then suspended and control is yielded back to the function that\ncalled foo.\nSome time later, when the first promise has either been fulfilled or rejected,\ncontrol moves back into foo. The result of the first promise fulfillment\n(if it was not rejected) is returned from the await expression. Here 1 is\nassigned to result1. Progress continues, and the second await expression\nis evaluated. Again, progress through foo is suspended and control is\nyielded.\nSome time later, when the second promise has either been fulfilled or rejected,\ncontrol re-enters foo. The result of the second promise resolution is\nreturned from the second await expression. Here 2 is assigned to\nresult2. Control moves to the return expression (if any). The default\nreturn value of undefined is returned as the resolution value of the\ncurrent promise.\nasync function foo() {\nconst result1 = await new Promise((resolve) => setTimeout(() => resolve('1')))\nconst result2 = await new Promise((resolve) => setTimeout(() => resolve('2')))\n}\nfoo()\nNote how the promise chain is not built-up in one go. Instead, the promise chain is\nconstructed in stages as control is successively yielded from and returned to the async\nfunction. As a result, we must be mindful of error handling behavior when dealing with\nconcurrent asynchronous operations.\nFor example, in the following code an unhandled promise rejection error will be thrown,\neven if a .catch handler has been configured further along the promise\nchain. This is because p2 will not be \"wired into\" the promise chain until\ncontrol returns from p1.\nasync function foo() {\nconst p1 = new Promise((resolve) => setTimeout(() => resolve('1'), 1000))\nconst p2 = new Promise((_,reject) => setTimeout(() => reject('2'), 500))\nconst results = [await p1, await p2] // Do not do this! Use Promise.all or Promise.allSettled instead.\n}\nfoo().catch(() => {}) // Attempt to swallow all errors...\nExamplesAsync functions and execution orderfunction resolveAfter2Seconds() {\nconsole.log(\"starting slow promise\")\nreturn new Promise(resolve => {\nsetTimeout(function() {\nresolve(\"slow\")\nconsole.log(\"slow promise is done\")\n}, 2000)\n})\n}\nfunction resolveAfter1Second() {\nconsole.log(\"starting fast promise\")\nreturn new Promise(resolve => {\nsetTimeout(function() {\nresolve(\"fast\")\nconsole.log(\"fast promise is done\")\n}, 1000)\n})\n}\nasync function sequentialStart() {\nconsole.log('==SEQUENTIAL START==')\n// 1. Execution gets here almost instantly\nconst slow = await resolveAfter2Seconds()\nconsole.log(slow) // 2. this runs 2 seconds after 1.\nconst fast = await resolveAfter1Second()\nconsole.log(fast) // 3. this runs 3 seconds after 1.\n}\nasync function concurrentStart() {\nconsole.log('==CONCURRENT START with await==');\nconst slow = resolveAfter2Seconds() // starts timer immediately\nconst fast = resolveAfter1Second() // starts timer immediately\n// 1. Execution gets here almost instantly\nconsole.log(await slow) // 2. this runs 2 seconds after 1.\nconsole.log(await fast) // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved\n}\nfunction concurrentPromise() {\nconsole.log('==CONCURRENT START with Promise.all==')\nreturn Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {\nconsole.log(messages[0]) // slow\nconsole.log(messages[1]) // fast\n})\n}\nasync function parallel() {\nconsole.log('==PARALLEL with await Promise.all==')\n// Start 2 \"jobs\" in parallel and wait for both of them to complete\nawait Promise.all([\n(async()=>console.log(await resolveAfter2Seconds()))(),\n(async()=>console.log(await resolveAfter1Second()))()\n])\n}\nsequentialStart() // after 2 seconds, logs \"slow\", then after 1 more second, \"fast\"\n// wait above to finish\nsetTimeout(concurrentStart, 4000) // after 2 seconds, logs \"slow\" and then \"fast\"\n// wait again\nsetTimeout(concurrentPromise, 7000) // same as concurrentStart\n// wait again\nsetTimeout(parallel, 10000) // truly parallel: after 1 second, logs \"fast\", then after 1 more second, \"slow\"\nawait and parallelism\nIn sequentialStart, execution suspends 2 seconds for the first\nawait, and then another second for the second await. The\nsecond timer is not created until the first has already fired, so the code finishes\nafter 3 seconds.\nIn concurrentStart, both timers are created and then awaited.\nThe timers run concurrently, which means the code finishes in 2 rather than 3 seconds,\ni.e. the slowest timer.\nHowever, the await calls still run in series, which means the second\nawait will wait for the first one to finish. In this case, the result of\nthe fastest timer is processed after the slowest.\nIf you wish to safely perform two or more jobs in parallel, you must await a call\nto Promise.all,\nor\nPromise.allSettled.\nWarning: The functions concurrentStart and concurrentPromise\nare not functionally equivalent.\nIn concurrentStart, if promise fast rejects before promise\nslow is fulfilled, then an unhandled promise rejection error will be\nraised, regardless of whether the caller has configured a catch clause.\nIn concurrentPromise, Promise.all wires up the promise\nchain in one go, meaning that the operation will fail-fast regardless of the order of\nrejection of the promises, and the error will always occur within the configured\npromise chain, enabling it to be caught in the normal way.\nRewriting a Promise chain with an async function\nAn API that returns a Promise will result in a promise chain, and it\nsplits the function into many parts. Consider the following code:\nfunction getProcessedData(url) {\nreturn downloadData(url) // returns a promise\n.catch(e => {\nreturn downloadFallbackData(url)\n// returns a promise\n})\n.then(v => {\nreturn processDataInWorker(v)\n// returns a promise\n})\n}\nit can be rewritten with a single async function as follows:\nasync function getProcessedData(url) {\nlet v\ntry {\nv = await downloadData(url)\n} catch(e) {\nv = await downloadFallbackData(url)\n}\nreturn processDataInWorker(v)\n}\nAlternatively, you can chain the promise with catch():\nasync function getProcessedData(url) {\nconst v = await downloadData(url).catch(e => {\nreturn downloadFallbackData(url)\n})\nreturn processDataInWorker(v)\n}\nIn the two rewritten versions, notice there is no await statement after the\nreturn keyword, although that would be valid too: The return value of an\nasync function is implicitly wrapped in Promise.resolve - if\nit's not already a promise itself (as in the examples).\nSpecificationsSpecificationECMAScript Language Specification # sec-async-function-definitionsBrowser compatibilityBCD tables only load in the browser <!-- -->with JavaScript enabled. Enable JavaScript to view data.See also\nasync function expression\nAsyncFunction object\nawait\nDecorating Async Javascript Functions on innolitics.com\nFound a problem with this page?Edit on GitHubSource on GitHubReport a problem with this content on GitHubWant to fix the problem yourself? See our Contribution guide.Last modified: May 1, 2022, by MDN contributorsMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutHacks BlogCareersSupportProduct helpReport a page issueReport a site issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporation’s not-for-profit parent, the Mozilla Foundation.Portions of this content are ©1998–2022 by individual mozilla.org contributors. Content available under a Creative Commons license.","title":"async function - JavaScript | MDNMDN Web DocsMDN logoMozilla logo","images":[]},{"id":16,"query_date":"07/01/2022","url":"https://www.youtube.com/watch?v=rfscVS0vtbw","title":"Learn Python"},{"id":17,"query_date":"07/01/2022","url":"https://www.analyticsvidhya.com/blog/2015/06/machine-learning-basics/","body":"\nsearch\nStart Here\nMachine Learning\nDeep Learning\nNLP\nArticles\nGuides\nMachine Learning\nDeep Learning\nNLP\nComputer Vision\nData Visualization\nCareers\nMore\nInfographics\nJobs\nPodcasts\nE-Books\nFor Companies\nDatahack Summit\nDSAT\nGlossary\nArchive\nWrite an Article\nCourses\nCertified AI & ML BlackBelt Plus\nAscend Pro\nData Science Immersive Bootcamp\nAll Courses\nBlogathon\n1729\nWrite an Article\nCreators Club\nSign in\nJoin Now\nManage your AV Account\nMy Hackathons\nMy Bookmarks\nMy Courses\nMy Applied Jobs\nSign Out\nD\nH\nM\nS\n×\nHome\nInterview Questions\nRelated Videos\nRelated Articles\nFree Courses\nSign in\nJoin Now\nManage your AV Account\nMy Hackathons\nMy Bookmarks\nMy Courses\nMy Applied Jobs\nSign Out\nMachine Learning Basics for a newbie\nFacebook\nTwitter\nLinkedin\nYoutube\nKunal Jain — June 11, 2015\nArtificial Intelligence\nBeginner\nData Science\nDeep Learning\nMachine Learning\nReinforcement Learning\nResource\nOverview\nGet introduced to the world of machine learning with some basic concepts\nStatistics, Artificial Intelligence, Deep Learning and Data mining are few of the other technical words used with machine learning\nLearn about the different types of machine learning algorithms\nIntroduction\nThere has been a renewed interest in machine learning in last few years. This revival seems to be driven by strong fundamentals – loads of data being emitted by sensors across the globe, with cheap storage and lowest ever computational costs!\nHowever, not every one around understands what machine learning is. Here are a few examples:\nWhat is Machine Learning and how is it different from Big Data and Business Analytics?\nWhat is the difference between machine learning, data analysis, data mining, data science and AI?\nHere was a little funny (but immensely true) take on the topic we circulated on our Facebook page recently.\n<img class=\"aligncenter wp-image-17016 size-full\" src=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/10945756_10202550638602268_6848260291113352290_n.jpg\" alt=\"machine learning\" width=\"657\" height=\"623\" srcset=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/10945756_10202550638602268_6848260291113352290_n.jpg 657w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/10945756_10202550638602268_6848260291113352290_n-300x284.jpg 300w\" sizes=\"(max-width: 657px) 100vw, 657px\" />\nComing to the point, given the amount of confusion on the topic, we thought to create an awesome introductory series of articles on machine learning. The idea is to do away with all the jargons, which might have intimidated you in past and create something which can be read by a 5 year old (ok…sorry, may be a high school pass out)!\nSo what exactly is machine learning? My small experiment…\nJust to make sure I don’t over-estimate (or under-estimate) the capability of the target audience, I got hold of 10 people who were completely new to analytics. None of them had heard about machine learning before (yes, there are people like that!). Here is what they said:\nI don’t know, may be learning from machines?\nMaking machines learn something a.k.a. programming machine software\nLearning with help of computers\nLearning through online courses (!!!)\nThat was fun! Perfect group to explain machine learning to. Here is how I started explaining to these people:\nMachine Learning refers to the techniques involved in dealing with vast data in the most intelligent fashion (by developing algorithms) to derive actionable insights.\nBy this time, they were looking at me as if I have spoken a few things in front of people from Mars! So, I stopped and then asked them a question in return, which they could relate to more:\nKJ: What do you think happens when you search for something on Google?\nGroup: Google shows up the most relevant web pages related to that search.\nKJ: That’s good! but what really happens so that Google can show these relevant pages to you?\nThis time it looked like they were thinking a bit more. Then some one from the group spoke\nGroup member: Google looks at the past clicks from the people to understand which pages are more relevant for those searches and then serves those results on top of search.\nThis was a far better attempt. I also had to control my urge to preach that how Google does this is far more smarter way than this simple concept. But, I thought I had a good hook to explain machine learning here. So, I continued:\nKJ: OK, that sounds like a good approach. But, how many searches and what all kind of searches would Google handle regularly?\nGroup: Must be a real big number – may be a trillion searches every year\nKJ: So, how do you think Google can serve so many requests with such accuracy? Do you think there are people sitting in Google offices and continuously deciding which search result is relevant and which is not?\nGroup member: Haven’t really thought about it, but no, that sounds humanly impossible to do.\nKJ: You are right. This is where machine learning comes into play. Machine learning is a set of techniques, which help in dealing with vast data in the most intelligent fashion (by developing algorithms or set of logical rules) to derive actionable insights (delivering search for users in this case).\nA logical nod from the group, looks like mission accomplished…yay! But wait…\nNow the common question – How is machine learning different from X?\nThe minute you start reading about machine learning, you see various rockets bombarding you with high velocity. These are jargons used loosely in the industry. Here are some of them: Artificial Intelligence, Deep Learning, Data Mining and Statistics.\nFor your clear understanding, I have explained these terms below in the simple manner. You will also understand the importance of these terms in context of machine learning:\nX = Artificial Intelligence(AI):\nIt refers to the procedure of programming a computer (machine) to take rational. Ah! what is rational? Rational is the basis of taking a decision.\nI mentioned ‘rational’ instead of intelligence (as expected) because we human beings tend to take decisions which are high on being rational and feasible rather than being explicitly intelligent. This is because all intelligent decisions needn’t be rational and feasible (my hypothesis). Hence, the central motive behind using AI is to achieve the computer (machine) behave in a dandy fashion in lieu of human guidance instead of being doltish!\nAI may include programs to check whether certain parameters within a program are behaving normally. For example, the machine may raise an alarm if a parameter say ‘X’ crosses a certain threshold which might in turn affect the outcome of the related process.\nUse of Artificial Intelligence in Machine Learning\nMachine Learning is a subset of AI where the machine is trained to learn from it’s past experience. The past experience is developed through the data collected. Then it combines with algorithms such as Naïve Bayes, Support Vector Machine(SVM) to deliver the final results.\nX = Statistics:\nAt this high level stage, I assume you would know about statistics. If you don’t, here’s a quick definition, Statistics is that branch of mathematics which utilizes data, either of the entire population or a sample drawn from the population to carry out the analysis and present inferences. Some statistical techniques used are regression,variance, standard deviation, conditional probability and many others. To know about this topic, read How to understand population distributions using statistics?\nUse of Statistics in Machine Learning\nLet’s understand this. Suppose, I need to separate the mails in my inbox into two categories: ‘spam’ and ‘important’. For identifying the spam mails, I can use a machine learning algorithm known as Naïve Bayes which will check the frequency of the past\nspam mails to identify the new email as spam. Naïve Bayes uses the statistical technique Baye’s theorem( commonly known as conditional probability). Hence, we can say machine learning algorithms uses statistical concepts to execute machine learning.\nAdditional Information: The main difference between machine learning and statistical models come from the schools where they originated. While machine learning originated from the department of computer science and statistical modelling came down from department of mathematics. Also any statistical modelling assumes a number of distributions while machine learning algorithms are generally agnostic of the distribution of all attributes.\nX = Deep Learning:\nDeep Learning is associated with a machine learning algorithm (Artificial Neural Network, ANN) which uses the concept of human brain to facilitate the modeling of arbitrary functions. ANN requires a vast amount of data and this algorithm is highly flexible when it comes to model multiple outputs simultaneously. ANN is more complex topic and we may do justice to it in an altogether separate article.\nX = Data Mining:\nDuring my initial days as an analyst, I always used to muddle the two terms: Machine Learning and Data Mining. But, later I learnt, Data Mining deals with searching specific information. And Machine Learning solely concentrates on performing a given task. Let me cite the example which helped me to remember the difference; Teaching someone how to dance is Machine Learning. And using someone to find best dance centers in the city is Data Mining. Easy!\nAlso Read: Introduction to Online Machine Learning\nBut, How exactly do we teach machines?\nTeaching the machines involve a structural process where every stage builds a better version of the machine. For simplification purpose, the process of teaching machines can broken down into 3 parts:\n<img loading=\"lazy\" class=\"aligncenter wp-image-17017 size-full\" src=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/teach-ML.png\" alt=\"machine learning process\" width=\"673\" height=\"280\" srcset=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/teach-ML.png 673w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/teach-ML-300x125.png 300w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/teach-ML-670x280.png 670w\" sizes=\"(max-width: 673px) 100vw, 673px\" />\nI shall be covering each of these 3 steps in detail in my subsequent write-ups. As of now, you should understand, these 3 steps ensures the holistic learning of the machine to perform the given task with equal importance. Success of machine depends on two factors:\n1. How well the generalization of abstraction data take place.\n2. How well the machine is able to put it’s learning into practical usage for predicting the future course of action.\nAlso Read: Learn about Scikit-Learn – Machine Learning tool in Python\nWhat are the steps used in Machine Learning?\nThere are 5 basic steps used to perform a machine learning task:\nCollecting data: Be it the raw data from excel, access, text files etc., this step (gathering past data) forms the foundation of the future learning. The better the variety, density and volume of relevant data, better the learning prospects for the machine becomes.\nPreparing the data: Any analytical process thrives on the quality of the data used. One needs to spend time determining the quality of data and then taking steps for fixing issues such as missing data and treatment of outliers. Exploratory analysis is perhaps one method to study the nuances of the data in details thereby burgeoning the nutritional content of the data.\nTraining a model: This step involves choosing the appropriate algorithm and representation of data in the form of the model. The cleaned data is split into two parts – train and test (proportion depending on the prerequisites); the first part (training data) is used for developing the model. The second part (test data), is used as a reference.\nEvaluating the model: To test the accuracy, the second part of the data (holdout / test data) is used. This step determines the precision in the choice of the algorithm based on the outcome. A better test to check accuracy of model is to see its performance on data which was not used at all during model build.\nImproving the performance: This step might involve choosing a different model altogether or introducing more variables to augment the efficiency. That’s why significant amount of time needs to be spent in data collection and preparation.\nBe it any model, these 5 steps can be used to structure the technique and when we discuss the algorithms, you shall then find how these five steps appear in every model!\nAlso Read: Getting Smart with Machine Learning – Ada Boost and Gradient Boost\nWhat are the types of Machine Learning algorithms?\n<img loading=\"lazy\" class=\"aligncenter wp-image-17032\" src=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/machine-learning-types.png\" alt=\"machine learning types\" width=\"600\" height=\"381\" srcset=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/machine-learning-types.png 939w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/machine-learning-types-300x191.png 300w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/machine-learning-types-850x540.png 850w\" sizes=\"(max-width: 600px) 100vw, 600px\" />\nSupervised Learning / Predictive models:\nPredictive model as the name suggests is used to predict the future outcome based on the historical data. Predictive models are normally given clear instructions right from the beginning as in what needs to be learnt and how it needs to be learnt. These class of learning algorithms are termed as Supervised Learning.\nFor example: Supervised Learning is used when a marketing company is trying to find out which customers are likely to churn. We can also use it to predict the likelihood of occurrence of perils like earthquakes, tornadoes etc. with an aim to determine the Total Insurance Value. Some examples of algorithms used are: Nearest neighbour, Naïve Bayes, Decision Trees, Regression etc.\nUnsupervised learning / Descriptive models:\nIt is used to train descriptive models where no target is set and no single feature is important than the other. The case of unsupervised learning can be: When a retailer wishes to find out what are the combination of products, customers tends to buy more frequently. Furthermore, in pharmaceutical industry, unsupervised learning may be used to predict which diseases are likely to occur along with diabetes. Example of algorithm used here is: K- means Clustering Algorithm\nReinforcement learning (RL):\nIt is an example of machine learning where the machine is trained to take specific decisions based on the business requirement with the sole motto to maximize efficiency (performance). The idea involved in reinforcement learning is: The machine/ software agent trains itself on a continual basis based on the environment it is exposed to, and applies it’s enriched knowledge to solve business problems. This continual learning process ensures less involvement of human expertise which in turn saves a lot of time!\nAn example of algorithm used in RL is Markov Decision Process.\nImportant Note: There is a subtle difference between Supervised Learning and Reinforcement Learning (RL). RL essentially involves learning by interacting with an environment. An RL agent learns from its past experience, rather from its continual trial and error learning process as against supervised learning where an external supervisor\nprovides examples.\nA good example to understand the difference is self driving cars. Self driving cars use Reinforcement learning to make decisions continuously – which route to take? what speed to drive on? are some of the questions which are decided after interacting with the environment. A simple manifestation for supervised learning would be to predict fare from a cab going from one place to another.\nWhat are the applications\nof Machine Learning?\nIt is very interesting to know the applications of machine learning. Google and Facebook uses ML extensively to push their respective ads to the relevant users. Here are a few applications that you should know:\nBanking & Financial services: ML can be used to predict the customers who are likely to default\nfrom paying loans or credit card bills. This is of paramount importance as machine learning would help the banks to identify the customers who can be granted loans and credit cards.\nHealthcare: It is used to diagnose deadly diseases (e.g. cancer) based on the symptoms of patients and tallying them with the past data of similar kind of patients.\nRetail: It is used to identify products which sell more frequently (fast moving) and the slow moving products which help the retailers to decide what kind of products to introduce or remove from the shelf. Also, machine learning algorithms can be used to find which two / three or more products sell together. This is done to design customer loyalty initiatives which in turn helps the retailers to develop and maintain loyal customers.\nThese examples are just the tip of the iceberg. Machine learning has extensive applications practically in every domain. You can check out a few Kaggle problems to get further flavor. The examples included above are easy to understand and at least give a taste of the omnipotence of machine learning.\nEnd Notes\nIn this article, we started by developing a basic understanding of what machine learning is. We also looked at how it gets confused with several other terms. We also covered the process to teach a machine, the essential steps used in machine learning, the algorithms used in machine learning followed by the applications of machine learning.\nI hope this article helped you to get acquainted with basics of machine learning. We would love to hear about it from you. Did you find it useful? What aspects of machine learning confuse you the most? Feel free to post your thoughts through comments below.\n<img loading=\"lazy\" class=\" wp-image-17028 alignleft\" src=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/payel_roy.jpg\" alt=\"payel_roy\" width=\"97\" height=\"97\" srcset=\"https://www.analyticsvidhya.com/wp-content/uploads/2015/06/payel_roy.jpg 261w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/payel_roy-150x150.jpg 150w, https://www.analyticsvidhya.com/wp-content/uploads/2015/06/payel_roy-83x83.jpg 83w\" sizes=\"(max-width: 97px) 100vw, 97px\" />\nThis article was originally written by Payel Roy Choudhury, before Kunal did his experiment to set the tone. Payel has completed her MBA with specialization in Analytics from Narsee Monjee Institute of Management Studies (NMIMS) and has worked with Tata Consultancy Services (TCS) in past. She is looking forward to contribute regularly to Analytics Vidhya.\nIf you like what you just read & want to continue your analytics learning, subscribe to our emails, follow us on twitter or like our facebook page.\nRelated\nArtificial Intelligencedata miningdeep learningmachine learningReinforcement LearningSupervised Learningunsupervised learning\n<img src=\"https://cdn.analyticsvidhya.com/wp-content/uploads/2022/06/1729-2-2.png\"><img src=\"https://cdn.analyticsvidhya.com/wp-content/uploads/2022/06/1729-2-2.png\">\nTable of contents\nAbout the Author\n<img class=\"img-fluid\" src=\"https://av-identity.s3.amazonaws.com/users/user/w11_1jwORqOZhXrl-UxRVQ.jpeg\" alt=\"Kunal Jain\" />\nKunal Jain\nKunal is a post graduate from IIT Bombay in Aerospace Engineering. He has spent more than 10 years in field of Data Science. His work experience ranges from mature markets like UK to a developing market like India. During this period he has lead teams of various sizes and has worked on various tools like SAS, SPSS, Qlikview, R, Python and Matlab.\nOur Top Authors\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/bGnsep7nT0GMWuLpkDl15Q.jpg\" alt=\"Rahul Shah\" />\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/R7HrsWl1QrGRiw_e9m4fDA.jpg\" alt=\"Sion Chakrabarti\" />\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/ZcU4ALTFT96MVCzfiGuhsQ.jpeg\" alt=\"CHIRAG GOYAL\" />\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/aM3WrxdNSTGLg7LoqX-q0w.png\" alt=\"Barney Darlington\" />\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/a4ByfUyoQRmdGzLpBzHVLw.jpeg\" alt=\"Arnab Mondal\" />\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/ZTsmKl-1Qvqn07FUzgaBNw.png\" alt=\"Prateek Majumder\" />\n<img src=\"https://av-identity.s3.amazonaws.com/users/user/1l1u7y8ORvuMMQlNitds9Q.jpg\" alt=\"Shanthababu Pandian\" />\n<img src=\"https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/remove-image/user4.png\" alt=\"Analytics Vidhya\" />\nview more\nDownload\nAnalytics Vidhya App for the Latest blog/Article\nPrevious Post\nIn Conversation with Mr. Stefan Groschupf, Founder and CEO, Datameer\nNext Post\nData Scientist – Machine Learning / Artificial Intelligence – IREF – Mumbai (3-6 Years of Experience)\n37 thoughts on \"Machine Learning Basics for a newbie\"\nJenarthanan KS says:\nJune 12, 2015 at 4:51 am\nThanks Kunal.\nNice Article... Good explanations.. Simple examples which really ease out every level of audience! Reply\nBISWA says:\nJune 12, 2015 at 7:52 am\nHII Reply\nBalaram Panda says:\nJune 12, 2015 at 7:55 am\nNice article. Thanks for posting this article. But I am not convince with the explanation of Machine Learning Vs Data Mining. As per the definition posted in the article it seems like Data Mining = BI Reporting (Business Intelligence Reporting) .\nAs per my experience I feel, Data Mining is a set of algorithm or statistical/mathematical technique , which is used in Machine Learning. Reply\nmrajugoud0 says:\nJune 12, 2015 at 8:40 am\nHi ,\nI have been hearing the word data science and big data. And, i tried to learn some machine learning algorithms in R and concentrating on Statastics.\nMy very BIG question is : I am working employee (just 2yrs exp)into Performance Testing domain and i want to shift to Analytics.\nPlease help me out the way to analytics.\nThanks,\nRaju Reply\nSajeed Kazi says:\nJune 13, 2015 at 5:06 pm\nGood article. Looking forward for more from Payal. Reply\nValerie says:\nJune 13, 2015 at 8:58 pm\nI fully agree with your comment\nThe 5 steps used in ML are also applicable to Data Mining, same for the business applications.\nReinforcement Learning is maybe what really distinguishes ML from Data Mining. Reply\nKumar Chinnakali says:\nJune 13, 2015 at 11:24 pm\nKJ & Payel Roy - Great Article, tons of thanks for sharing. No doubt, one of the best friend in learning anlytics technology is AV. Is it possible to have a series of blog, say example Machine Learning , Task Driven ML, then Data Driven ML, RI ML. So newbie like me will able to follow the series of blogs to become full set of understand on the subject.\nIt's just suggestion not a comment please.\nHats Off for my only favourite AV Team ! Reply\nAbhinav Singh says:\nJune 15, 2015 at 8:25 am\nPart of your queries answered here, Raju\nhttp://www.analyticsvidhya.com/blog/2014/05/planning-late-career-shift-analytics-big-data-prepared/?utm_source=FBPage&utm_medium=Social&utm_campaign=150425 Reply\nAmol Gothe says:\nJune 16, 2015 at 6:30 am\nThis is a very insightful article and of great help not only to those people who don't have any idea but also to those people who are just started to take baby steps in the field of machine learning and analytics. Reply\nArt says:\nJune 20, 2015 at 6:19 pm\nNice, thanks. Reply\nKumar says:\nJuly 06, 2015 at 6:32 am\nHi Kunal,\nNice article with comparisons over related techniques and with very relevant examples.\nI am wondering if we can classify supervised and unsupervised techniques as subsets of ML when we have clearly defined RL. RL is what mostly distinguish ML from other related techniques.\nIn the retail example – identifying fast vs slow movers is usually done thru drilled down reports while combination of products selling together is by “affinity” (or) “association analysis” which is unsupervised. Can we categorise these as ML ? Reply\nRamesh says:\nJuly 11, 2015 at 4:41 pm\nHi Kunal,\nThanks for your awesome information about machine learning. I don't have much knowledge about mathematics.\nIs Mathematics important to learn the following\n1. Hadoop(Big Data)\n2. Machine Learning Reply\nShilpa says:\nSeptember 23, 2015 at 3:06 pm\nThanks for the explanatory article. Reply\nAnurag Chaudhary says:\nOctober 04, 2015 at 5:46 pm\nGreat article with catchy examples, cleared a lot of questions. Reply\nNasir Hussain says:\nOctober 12, 2015 at 6:46 pm\nGreat article for a novice like me. Well done for posting it. Reply\nManoj says:\nJanuary 25, 2016 at 6:25 am\nnice post easy to understand. Thanks team Reply\nManpreet says:\nAugust 24, 2016 at 6:03 am\nNice Article,Explain basics pf machine learning and what it is actually in explanatory way.Thanks Reply\nShakti Ranjan says:\nSeptember 08, 2016 at 6:46 pm\nNicely Articulated Reply\nAmina says:\nSeptember 18, 2016 at 1:58 pm\nThanks for sumpliying everything. My question is what is connection between machine learning and data science?\nReply\nArun Mahendrakar says:\nSeptember 21, 2016 at 4:35 am\nI had a question though. Most of these books are published about 10 years ago. I do agree that a good book is a good book, but aren't there later versions of these books or better books themselves? Reply\nPankaj says:\nApril 14, 2017 at 1:44 am\nVery well explained article. Thank you Reply\nSandeep says:\nApril 20, 2017 at 9:40 am\nThanks Kunal . Great information / Learning for students like me . Reply\nRitwik says:\nMay 24, 2017 at 5:18 am\nVery nice & great explanation for a novice... Reply\nParamesh says:\nJune 04, 2017 at 6:45 am\nNice write up. Gave me a good walkthrough of things i learnt on college. Reply\nArvind Gopinath says:\nJuly 12, 2017 at 7:21 am\nGreat Article. Reply\nSandeep Mishra says:\nJuly 16, 2017 at 12:34 pm\ngood explanation Reply\nAdhi says:\nJuly 25, 2017 at 12:00 pm\nGood and organised information.Thank you. Reply\nAyoobali KK says:\nOctober 24, 2017 at 5:49 pm\nNice Article Reply\nAditya Krishnan Narasimhan says:\nNovember 14, 2017 at 4:41 am\nNice explanation for the beginner Reply\nNaveen Reddy says:\nApril 12, 2018 at 8:38 am\nThanks for the descriptive article. Reply\nYasin says:\nApril 13, 2018 at 8:23 am\nTeaching someone how to dance is Machine Learning. And using someone to find best dance centers in the city is Data Mining. Easy!\nThis one is super .. easy understanding.. Reply\nAishwarya Singh says:\nApril 13, 2018 at 2:59 pm\nHi Yasin,\nThank you for your feedback Reply\nAishwarya Singh says:\nApril 13, 2018 at 3:19 pm\nHi Naveen,\nThank you for the feedback. Reply\nAishwarya Singh says:\nApril 13, 2018 at 3:27 pm\nHi Aditya,\nThank you for the feedback! Reply\nashubais says:\nApril 17, 2018 at 8:05 pm\nHi Kunal,\nI would like to thank you for such an impressive article on Machine learning basics. It really helped me a lot on a project that i am working.\nThanks, Reply\nashubais says:\nApril 17, 2018 at 8:09 pm\nThanks for the impressive article, It helped with the project on which i am working. Reply\nAishwarya Singh says:\nApril 18, 2018 at 5:26 pm\nHi Ashubais,\nGlad you found this useful! Reply\nLeave a Reply Your email address will not be published. Required fields are marked * Cancel reply\nNotify me of follow-up comments by email. Notify me of new posts by email.Submit\nΔ\nTop Resources\n<img src=\"https://cdn.analyticsvidhya.com/wp-content/uploads/2020/08/Basic-Concepts-of-Object-Oriented-Programming-in-Python.jpg\" class=\"card-img-top\" alt=\"\">\nPython Tutorial: Working with CSV file for Data Science\nHarika Bonthu -\nAug 21, 2021\n<img src=\"https://cdn.analyticsvidhya.com/wp-content/uploads/2020/02/type_of_neural_networks.png\" class=\"card-img-top\" alt=\"\">\nBoost Model Accuracy of Imbalanced COVID-19 Mortality Prediction Using GAN-based..\nBala Gangadhar Thilak Adiboina -\nOct 07, 2020\n<img src=\"https://cdn.analyticsvidhya.com/wp-content/uploads/2020/02/featured_image-2.jpg\" class=\"card-img-top\" alt=\"\">\nJoins in Pandas: Master the Different Types of Joins in..\nAbhishek Sharma -\nFeb 27, 2020\n<img src=\"https://cdn.analyticsvidhya.com/wp-content/uploads/2020/06/AUC-ROC-curve-1.png\" class=\"card-img-top\" alt=\"\">\nAUC-ROC Curve in Machine Learning Clearly Explained\nAniruddha Bhandari -\nJun 16, 2020\n×\n<img src=\"https://av-public-assets.s3.ap-south-1.amazonaws.com/logos/AV_logo_wite.png\" alt='Analytics Vidhya' width=\"85%\">\nDownload App\nAnalytics Vidhya\nAbout Us\nOur Team\nCareers\nContact us\nData Scientists\nBlog\nHackathon\nDiscussions\nApply Jobs\nCompanies\nPost Jobs\nTrainings\nHiring Hackathons\nAdvertising\nVisit us\n© Copyright 2013-2022 Analytics Vidhya.\nPrivacy Policy\nTerms of Use\nRefund Policy\nWe use cookies on Analytics Vidhya websites to deliver our services, analyze web traffic, and improve your experience on the site. By using Analytics Vidhya, you agree to our Privacy Policy and Terms of Use.AcceptPrivacy & Cookies Policy\nClose\nPrivacy Overview\nThis website uses cookies to improve your experience while you navigate through the website. Out of these, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website. We also use third-party cookies that help us analyze and understand how you use this website. These cookies will be stored in your browser only with your consent. You also have the option to opt-out of these cookies. But opting out of some of these cookies may affect your browsing experience.\nNecessary\nNecessary\nAlways Enabled\nNecessary cookies are absolutely essential for the website to function properly. This category only includes cookies that ensures basic functionalities and security features of the website. These cookies do not store any personal information.\nNon-necessary\nNon-necessary\nAny cookies that may not be particularly necessary for the website to function and is used specifically to collect user personal data via analytics, ads, other embedded contents are termed as non-necessary cookies. It is mandatory to procure user consent prior to running these cookies on your website.\nSAVE & ACCEPT\n×\n","title":"Machine Learning Basic Concepts | Basic ML Concepts","images":["https://av-public-assets.s3.ap-south-1.amazonaws.com/logos/av-logo-svg.svg","","","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/icon/write-article.svg","","","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/icon/pdf.svg","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/icon/Share.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/play_store_icon.svg","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/app_Store_icon.svg","https://secure.gravatar.com/avatar/a693ce16c77c878d15f5809cc8433af2?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/0a91fa3581c9d9792863c3f536c084a7?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/f5446ebafe266ee52103876fb85a6def?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/6d1e3ad7243b8005fb084ad88f4c2f5e?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/c4f9a670eef983b0fee785ad09b81337?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/258494f33a9f43e30a1156bc3fc96815?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/e099f56776a3d2cbec11cd76b9111073?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/e41f2aca0982ff293369dba675728dec?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/f0da0b23719e5e4b3f6fb489a4f1f393?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/7f0339e6f29d27e6808730aedab53925?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/be6f5eeecbfb4653dfc361e631324a4b?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/62fb072446d7b04429865cc820df9812?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/1d21527056b60dd9440480b6becf36c4?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/214f11ff8309564d8b32e85e0a0ac1da?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/66bfd8b5d929dc602974a31fdb629780?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/475244d3d709f7506ae275a4d8ce2a1f?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/598901d7e6a07ca1e3a728f417e4ce10?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/bcb20c303d93d3db731658ab96e7761f?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/0c2fd6974cfca81a895ddd5042dbab44?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/2d1c8d7f138fe9d88bf88f0ae2300109?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/041d8b4f39a10cd3a76716079d882f51?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/87a6e5772cdf9ba3567960444c9076c2?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/4d62bbba879f3716ba0fe01f8971b8a5?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/5b08c1035eef6b61690e9094390ad8f9?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/64030a98ff4711327d4ed957ad12a214?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/a3bd9b496ae39ef600cd60e954393019?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/e9af7afbab44d123d2d4fb3d174c0c16?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/0bb2e498b42516f35c921b89a827b875?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/4fd83a17efd1f56d204fe2bd0c396e69?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/953373fc842b1cbd49e0d82e17db05be?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/deda08f255a5a3ede201449197880b9f?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/9674ea7760b6955e65709184e41f12c2?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/9674ea7760b6955e65709184e41f12c2?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/9674ea7760b6955e65709184e41f12c2?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/fc6f24936a942b39840036a91a705f39?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/fc6f24936a942b39840036a91a705f39?s=74&d=mm&r=g","https://secure.gravatar.com/avatar/9674ea7760b6955e65709184e41f12c2?s=74&d=mm&r=g","https://av-public-assets.s3.ap-south-1.amazonaws.com/others/av-crown.svg","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/play_store_icon.svg","https://www.analyticsvidhya.com/wp-content/themes/analytics-vidhya/images/app_Store_icon.svg"]}]